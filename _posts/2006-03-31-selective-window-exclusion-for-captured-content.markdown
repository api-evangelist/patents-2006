---

title: Selective window exclusion for captured content
abstract: Described is the selective exclusion of content returned in a requested screen capture operation, wherein exclusion may be determined by a window category and the requesting application program. For example, a magnification program will not received content captured from its own layered window or from any other layered magnification windows. A registration mechanism obtains and maintains a window handle for any window registered for exclusion. A screen capture mechanism uses the information to determine whether to exclude the content of windows when returning the captured screen content. Exclusion may be accomplished by enumerating areas that are not covered by any layered window and copying those areas to a screen representation buffer or the like, and separately enumerating areas that are covered by at least one layered window. A covered area is only copied to the screen representation when it does not correspond to an excluded window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689926&OS=07689926&RS=07689926
owner: Microsoft Corporation
number: 07689926
owner_city: Redmond
owner_country: US
publication_date: 20060331
---
Contemporary computer systems offer users the ability to magnify a portion of their display screen typically for providing visually impaired users with better accessibility to computers although also offering mainstream users the benefit of magnification in certain contexts. In general when the user runs a magnifier a magnification window is opened and the magnified content displayed in that window. Often the user can adjust the magnification window in size and position adjust the magnification level and possibly choose other effects e.g. color inversion.

Screen magnifiers are generally built to operate in one or more various modes. In a full screen magnifier mode the magnifier window occupies the entire screen and the program magnifies a subset of the underlying content typically depending on where the pointer indicator cursor is located. A fixed mode provides a less than full screen window that is fixed on the screen and typically magnifies some appropriate area that surrounds the pointer indicator cursor. In a floating lens mode the magnification window moves with the pointer indicator cursor. With some magnification programs a user may change between modes.

Previous magnification programs worked by inserting a driver in the video path above the main display driver to intercept graphics primitives processing the primitives to build an off screen model to magnify the screen content and then outputting the magnified screen content to the screen. An recent accessibility technology that provides an alternative to or a complement to driver based magnifiers is described in U.S. patent application Ser. No. 11 180 859 filed Jul. 12 2005 assigned to the assignee of the present invention and hereby incorporated by reference. This technology is among its aspects generally directed towards a magnification engine and API application programming interface that magnifier applications can leverage and that renders a magnifier in software and or hardware.

As can be readily appreciated some magnifier modes such as full screen mode and floating lens mode require the ability to capture and magnify screen content that is under the magnifier window. However this leads to a problem in that if the magnifier window magnifies itself that is magnifies already magnified content recursive magnification will occur.

With the magnification engine and API solution magnification is implemented via a special type of window referred to as a layered window. As a result recursive magnification can be avoided by excluding layered windows from the screen content that is provided to the magnifier application program. However excluding layered windows results in all windows that are marked layered as being excluded including those that are not magnifier windows. This causes a problem because other components make use of layered window technology e.g. to output screen content including transparent semi opaque UI elements such as tooltips and user interface elements in recent application programs e.g. Microsoft Corporation s Visual Studio and Office 12 products . Depending on the mode of the magnifier the result of the layered window exclusion is that these non magnifier windows become invisible to an end user because as layered windows their rendered output is not provided to the magnification program.

This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in any way that would limit the scope of the claimed subject matter.

Briefly various aspects of the subject matter described herein are directed towards an exclusion mechanism that selectively controls whether the content of any window may be captured by a given application program as determined by a category of that window. A registration mechanism obtains and maintains information e.g. a window handle or HWND for any window that is registered as belonging to an exclusion category. A screen capture mechanism determines whether captured screen content should exclude each window of the exclusion category and if so employs an exclusion mechanism to selectively capture screen content by copying screen content corresponding to windows that do not belong to the exclusion category.

In one example upon receiving a registration request to register a window the window is registered along with any similarly registered window or windows of the same category. When a request to capture screen content is received from a registered window the content of each registered window is excluded from the captured screen content that is returned in response to the screen capture request.

Thus by maintaining data that identifies each window of a layered magnifier window category for example any receiving a request to capture screen content from a magnifier window program receives captured screen content that excludes layered magnification windows. For example this may be accomplished by enumerating areas that are not covered by any layered window and copying those first areas to a screen representation buffer or the like and enumerating areas that are covered by at least one layered window. A covered area is only copied to the screen representation when it does not correspond to an excluded window. The copied screen representation is then returned without including the screen content of excluded windows.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

An auxiliary display subsystem may be connected via the user interface to allow data such as program content system status and event notifications to be provided to the user even if the main portions of the computer system are in a low power state. The auxiliary display subsystem may be connected to the modem and or network interface to allow communication between these systems while the main processing unit is in a low power state.

Various aspects of the technology described herein are directed towards a technology that avoids recursive magnification problems and does so without excluding the content of non magnifier windows from the screen content that is magnified. In general this is accomplished via a mechanism process that excludes non magnifier windows from having their content returned for magnification but not other layered windows.

In one example implementation described herein selective exclusion is described in the example context of a Windows based operating system architecture. However as will be understood the present invention is not limited to Windows based operating systems let alone any particular implementation or examples described herein. Instead numerous ways to implement the present invention are feasible.

Further instead of or in addition to excluding magnifier windows for example the mechanism described herein may selectively exclude essentially any one window or category of window types from having its content seen by another window or windows. Thus the mechanism may granularly exclude one or more windows for example to prevent as little as one window from seeing the content corresponding to as little as one other window or alternatively may work with broad categories. As such the present invention is not limited to any of the particular examples used herein but rather may be used various ways that provide benefits and advantages in computing in general.

In a Windows based environment layered windows including magnifier windows are marked with a WS EX LAYERED window style. To this end the magnifier application calls CreateWindowEx and sets its window to be layered which are typical operations for a layered window.

In such an environment the screen contents may be captured by having the magnifier program initiate a GetDC null function call to GDI the graphics device interface of Microsoft Windows where a GetDC function retrieves a handle to a display device context DC for the client area of a specified window or for the entire screen. The returned handle may be used with subsequent GDI functions to draw in the device context. More particularly as represented in GDI is an intermediary support between a Windows based graphics driver and application programs. In general a user mode program and other programs may call Win32 GDI functions to make graphics output requests whereby these requests are provided to a kernel mode GDI engine .

In turn the kernel mode GDI engine sends these requests to an appropriate graphics driver such as a display driver or printer driver . In general GDI communicates with the graphics driver through a set of graphics device driver interface graphics DDI functions which may be identified by their Drv prefix the driver supports certain DrvXxx functions for GDI to call . Information is passed between the GDI engine and the driver through appropriate input output parameters. The driver supports the GDI engine s requests by performing the appropriate operations on its associated hardware before returning to the GDI engine .

To capture the screen contents following the above described GetDC null function call the application program requests a BitBLT to obtains the relevant portion of the screen to be magnified. The BitBlt function performs a bit block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. As described above such calls to BitBlt with a conventional CAPTUREBLT rop raster op code may include all layered windows including the magnifier window however this would case cause recursive magnification in full screen or floating magnifier modes since the magnifier would get its own screen content.

Note that in the example of it is shown that the combined screen reader magnifier uses the magnification API engine as well as accessibility mirror driver technology such as via the mirror driver. The other user mode programs and likewise use mirror drivers e.g. . Mirror drivers are described in copending United States patent application entitled Selective Rendering for Driver Classes assigned to the assignee of the present invention filed concurrently herewith and hereby incorporated by reference.

With respect to magnifier exclusion for programs that use the magnification API engine in the example represented in consider an exclusion mechanism for the magnifier application . To use the API the magnifier application passes the HWND of the magnification window to the magnification API engine . In turn the magnification API engine registers the HWND for the magnifier window to enable exclusion of this category of windows such as via a function e.g. SetMagnifierWindow exposed privately via a User32 component e.g. User32p.lib . For example in this example implementation magnifier windows created using the magnification API are automatically registered with the system driver Win32k.sys e.g. via User32p.lib SetMirrorRendering APIs. Note that the HWND registration information may be provided to the system driver to the GDI components shown as a single block in to represent the user mode and kernel components or to both. The HWND may be separately registered for the magnification window of each such magnification program for example when it first calls the magnification API engine however it is feasible to have a registration mechanism that allows multiple magnification windows to be registered at the same time. Note that once registered the exclusion of magnification windows when magnifying layered windows persists through display mode changes but otherwise may be specifically de registered and is also turned off if an HWND is closed since the system may reuse HWNDs .

To avoid the recursive magnification problem while not also filtering out layered windows that the magnifier wants to see the technology herein excludes any legitimately registered magnification window or windows but not all layered windows. In other words non layered windows are seen along with any layered windows that are not registered as magnification type layered windows. As described above the magnification API automatically handles the registration process whereby the magnifier application program only need provide its HWND to the magnification API engine or receive an HWND from it in response to another call . It is feasible to have alternative models such as one in which the application program directly registers itself via the user32 code and or via the GDI interface .

With respect to excluding the content of registered windows the CAPTUREBLT rop code may be modified such that screen capture callers will received a full set of non layered and layered windows other than a specifically excluded window or specifically excluded category of windows. Note that instead of modifying the CAPTUREBLT rop code it is equivalent to define one or more new rop codes however for purposes of simplicity a modified CAPTUREBLT rop code will be described.

Thus in one example implementation filtering is accomplished by defining a category of windows that correspond to magnifier windows and excluding those windows e.g. via their window handles or HWNDs from the output of a CAPTUREBLT operation.

With respect to filtering operations once the specific layered magnifier HWND or HWNDs are registered for exclusion content corresponding to that set of one or more HWNDs can be identified and excluded from return. Essentially any way of tracking a registered category of windows e.g. magnifiers with their corresponding HWNDs may be used such as by maintaining a table or similar data structure. Note that in one implementation all magnifiers that use the API are registered and categorized together such that no magnifier window will receive the content of any magnifier window including its own content.

Rendering paths are also represented in including alternative rendering paths from the magnification API engine to the kernel mode display driver that may be used. In general the magnification API engine checks to see if it can open the graphics stream which is essentially an LPC channel to the media integration layer MIL composition engine . If a connection to the graphics stream cannot be opened magnification is implemented via the Win32k.sys system driver e.g. via GetDC null and StretchBlt .

If a connection to the graphics stream can be opened magnification is implemented using the composition engine in either software or hardware rendering mode. More particularly hardware rendering may occur when the magnifier window is not a layered window and other hardware requirements to compose in hardware are met. If so the magnifier window will be rendered in hardware as a windowed Dx application. The composition engine uses DxgKernel interfaces to draw to the kernel mode display driver .

Software rendering is instead used by the composition engine when the magnifier window is a layered window or other hardware requirements to compose in hardware are not met. In such a situation the magnifier window is rendered in software to a surface which is composited by the GDI sprite layer in the system driver e.g. Win32k.sys .

In a situation where a connection to the graphics stream cannot be opened the system driver e.g. Win32k.sys calls DrvXXX functions implemented by a canonical display driver CDD . The canonical display driver essentially implements a Windows XP type device driver interface calls GDI support services in the system driver Win32k.sys to render and then draws to the display driver via DxgKernel . Note that the canonical display driver DxgKernel and the display driver are a secure path. Further note that the canonical display driver essentially insulates other e.g. Windows Vista type driver model display drivers from having to implement the Windows XP type device driver interface and eliminate the need to avoid modifying Win32k.sys to work with a Dx interface which other e.g. Windows Vista type driver model display drivers support.

A sprite range is a data structure inside the GDI that keeps track of z order and contains a complete spatial representation of sprite underlays the area under a sprite layered window and sprites. The GDI copies areas not covered by a sprite to the destination device context. The GDI then copies the sprite underlays to the destination device context. Note that if the CAPTUREBLT rop code is not used when copying bits from the screen to a destination bitmap the GDI references the sprite ranges to draw the uncovered areas and sprite underlays. The effective result is that bits copied do not reflect the presence of any layered windows.

Alternatively using CAPTUREBLT when copying bits from the screen to a destination bitmap is a sprite aware capture and using the technology herein this operation is also aware of registered category of windows. In this example the capture is aware of magnifier windows.

To capture another copy of the screen is created. The GDI draws any uncovered screen regions to the copy of the screen that is draws areas not covered by layered windows sprites. Areas that are covered by sprites are treated differently by filtering out any sprites associated with registered magnifiers.

To filter out magnifier sprites GDI enumerates the sprite ranges for the covered regions and recomposes the region sprites with the registered HWNDs ignored. generally describes one process for such exclusion.

Steps and represent the disabling operation which is essentially similar. One additional error may be an attempt to de register an HWND that was not registered.

Step determines whether any covered region needs to be drawn and if not the screen copy process is ended. If there is a covered region steps represent the enumeration and filtering process with step excluding magnifiers by passing step for any registered HWND. Step repeats the filtered composition process until the copy is drawn with the content of any registered windows excluded. The dashed line in represents the filtering process being repeated for subsequent HWND s screen capture operations.

While the above examples primarily focused on selective filtering for magnification purposes and the like it should be noted that selective filtering for other applications may also be used. For example for security purposes certain windows may be prevented via filtering e.g. particularly via inclusion filtering i.e. only an included window can capture another window from capturing the content of another window. Screen capture a window s content can be made more difficult by this mechanism.

Further other types of windows may benefit from such exclusion. By way of example consider a mostly transparent layered window that changes the color and or contrast of other windows such as to help a visually impaired user view content. By registering itself as a magnifier regardless of whether it actually magnifies the layered window will not change the color and or contrast of other magnifiers and vice versa. This would be beneficial when other magnifiers and the like have their own color contrast settings that incorrectly appear when shown in conjunction with the layered color contrast window.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

