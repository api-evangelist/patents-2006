---

title: Supporting multiple security mechanisms in a database driver
abstract: A method for connecting a client to a database server are provided. The method provide for providing a generic interface, the generic interface being operable to interoperate with one or more non-GSSAPI (Generic Security Services Application Programming Interface) compliant security mechanisms, providing a set of specialized interfaces, the set of specialized interface being operable to interoperate with one or more GSSAPI compliant security mechanisms, and establishing a connection between a client and a database server using the generic interface or the set of specialized interfaces depending on a security mechanism used by the client. The one or more non-GSSAPI compliant security mechanisms and the one or more GSSAPI compliant security mechanisms may be predefined or user-defined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761468&OS=07761468&RS=07761468
owner: International Business Machines Corporation
number: 07761468
owner_city: Armonk
owner_country: US
publication_date: 20061004
---
The present invention relates generally to database drivers. More particularly the present invention is directed to support of multiple security mechanisms in a database driver.

Database drivers are software modules that enable clients e.g. applications to communicate with database servers e.g. database management systems . Typically a security mechanism is used to ensure communication between a client and a database server is secure. A variety of predefined security mechanisms are currently available ranging from simple user identification and password checking to complex Kerberos authentication.

Multiple types of security mechanisms are usually supported by a database server for authenticating clients seeking to communicate with the database server. Since a database driver relies upon a security mechanism to obtain authorization from the database server before access can be granted to a client the database driver must be able to interoperate with the security mechanism used by the client. However it is not practical to include support for every type of security mechanism that may be used by a client in the database driver.

In addition some clients may want to use a user defined security mechanism rather than a predefined security mechanism. Although some database servers provide the flexibility to plug in user defined security mechanisms database drivers presently do not have the necessary interoperability with user defined security mechanisms.

A method for connecting a client to a database server are provided. The database driver includes a generic interface operable to interoperate with one or more non GSSAPI Generic Security Services Application Programming Interface compliant security mechanisms and a set of specialized interfaces operable to interoperate with one or more GSSAPI compliant security mechanisms. The database driver is operable to establish a connection between the client and the database server using the generic interface or the set of specialized interfaces depending on a security mechanism used by the client. The security mechanism used by the client is operable to ensure the connection between the client and the database server is established in a secure manner.

In one embodiment the database driver also includes a separate interface in communication with the generic interface and the set of specialized interfaces. The separate interface is operable to free up one or more system resources used to establish the connection between the client and the database server and to erase cryptographic information created to establish the connection between the client and the database server. The separate interface may be invoked in response to establishment of the connection between the client and the database server.

The generic interface is operable to retrieve security context information created in accordance with the security mechanism used by the client in an embodiment. In the embodiment the security mechanism used by the client is one of the one or more non GSSAPI compliant security mechanisms.

In an embodiment the set of specialized interfaces includes a first interface operable to be utilized by the client to set a principal name in a security module created by the client to encapsulate the security mechanism used by the client a second interface operable to retrieve the principal name set by the client from the security module a third interface operable to be utilized by the client to set a credential in the security module a fourth interface operable to retrieve the credential set by the client from the security module and a fifth interface operable to retrieve a context from the security module. The context is created by the security module using a combination of the principal name and the credential set by the client. In the embodiment the security mechanism used by the client is one of the one or more GSSAPI compliant security mechanisms. The database driver is operable to invoke the context to obtain security context information created in accordance with the security mechanism used by the client in one embodiment.

At least one of the one or more non GSSAPI compliant security mechanisms is a user defined security mechanism in one embodiment. In another embodiment at least one of the one or more GSSAPI compliant security mechanisms is a user defined security mechanism. The security mechanism used by the client is a user defined security mechanism is an embodiment.

The present invention relates generally to database drivers and more particularly to support of multiple security mechanisms in a database driver. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the preferred implementations and the generic principles and features described herein will be readily apparent to those skilled in the art. Thus the present invention is not intended to be limited to the implementations shown but is to be accorded the widest scope consistent with the principles and features described herein.

In order to ensure that a connection between a client e.g. an application and a database server e.g. a database management system DBMS is established in a secure manner a security mechanism may be used. Many predefined security mechanisms are available such as Kerberos Simple Public Key Mechanism SPKM and Low Infrastructure Public Key Mechanism LIPKEY . Some of the predefined security mechanisms are compliant with the Generic Security Services Application Programming Interface GSSAPI standard and others are not. GSSAPI is an application programming interface for providing security services in a generic fashion that was developed by The Open Group.

When a database driver is used to facilitate communications between a client and a database server e.g. establish connection transfer data between the client and the database server etc. the database driver needs to support the various security mechanisms used by the client and the database server. Due to the number of security mechanisms currently available it is not practical to include support for every type of security mechanism in the database driver. In addition some clients and database servers may elect to utilize a user defined security mechanism rather than a predefined security mechanism. Database drivers however do not presently support user defined security mechanisms.

Depicted in is a process for connecting a client to a database server through a database driver according to an embodiment of the invention. At a generic interface is provided in the database driver. The generic interface is operable to interoperate with one or more non GSSAPI Generic Security Services Application Programming Interface compliant security mechanisms. At a set of specialized interfaces is provided in the database driver. The set of specialized interfaces is operable to interoperate with one or more GSSAPI compliant security mechanisms.

A connection between the client and the database server is then established using the generic interface or the set of specialized interfaces depending on a security mechanism used by the client . The security mechanism used by the client may be a user defined or a predefined security mechanism. In addition the security mechanism used by the client is operable to ensure the connection between the client and the database server is established in a secure manner. By including the generic interface and the set of specialized interfaces in the database driver the database driver is able to interoperate with multiple security mechanisms including GSSAPI compliant and non GSSAPI compliant security mechanisms as well as predefined and user defined security mechanisms.

Shown in is a database driver according to an embodiment of the invention. Database driver includes a generic interface that is operable to interoperate with a non GSSAPI compliant security mechanism a set of specialized interfaces that is operable to interoperate with a GSSAPI compliant security mechanism and a separate interface that is operable to free up one or more system resources used to establish a connection between a client and a database server and to erase cryptographic information e.g. tickets keys etc. created to establish the connection between the client and the database server. In one embodiment the separate interface is invoked in response to establishment of the connection between the client and the database server.

Non GSSAPI compliant security mechanism may be a user defined or a predefined security mechanism and GSSAPI compliant security mechanism may be a user defined or a predefined security mechanism. Although only one non GSSAPI compliant security mechanism is shown in generic interface can interoperate with multiple non GSSAPI compliant security mechanisms. In addition even though the set of specialized interfaces is shown as only interoperating with one GSSAPI compliant security mechanism in the set of specialized interfaces can interoperate with other GSSAPI compliant security mechanisms.

Generic interface is operable to retrieve security context information e.g. user name and password key ticket credential etc. created in accordance with the security mechanism used by the client in one embodiment. In the embodiment the security mechanism used by the client is non GSSAPI compliant security mechanism .

A principal name retrieving interface is also included in the set of specialized interfaces . Principal name retrieving interface is operable to retrieve the principal name set by the client from security module . The set of specialized interfaces further includes a credential storing interface a credential retrieving interface and a context retrieving interface . Credential storing interface is operable to be utilized by the client to set a credential in security module . Credentials are used to verify the identity of the client and are sometimes referred to as tickets.

Credential retrieving interface is operable to retrieve the credential set by the client from security module . Context retrieving interface is operable to retrieve a context from security module . The context is created by security module using a combination of the principal name and the credential set by the client. In one embodiment the database driver is operable to invoke the context to obtain security context information created in accordance with the security mechanism used by the client.

Illustrated in is a security module created by a client according to an embodiment of the invention. Security module includes a principal name a credential and a context . Additional information not shown may be included in security module in other embodiments. Each security module may be unique to a particular client and or a specific connection.

If the security mechanism used by the client is not a GSSAPI compliant security mechanism i.e. it is a non GSSAPI compliant security mechanism the generic interface is utilized to retrieve security context information created in accordance with the security mechanism used by the client at . At the security context information is transferred to the database server. A determination is made at as to whether an authentication failure notice has been received from the database server. An error is reported to the client at responsive to receiving an authentication failure notice.

A determination is made at as to whether mutual authentication is required when an authentication failure notice has not been received from the database server. If mutual authentication is required security context information relating to the database server is authenticated at . At a determination is made as to whether there has been an authentication failure with respect to the security context information relating to the database server. An error is reported to the database server at responsive to authentication failure of the security context information relating to the database server.

When it is determined at that mutual authentication is not required or it is determined at that there has not been an authentication failure a determination is made at as to whether further authentication is required. If further authentication is required process returns to . If further authentication is not required a connection between the client and the database server is established at and the separate interface is invoked at to free up one or more system resources used to establish the connection and to erase cryptographic information created to establish the connection.

If it is determined at that the security mechanism used by the client is a GSS compliant security mechanism a second interface in the set of specialized interfaces is utilized to retrieve a principal name from a security module at . The security module is created by the client to encapsulate the security mechanism used by the client and the principal name is set by the client in the security module using a first interface in the set of specialized interfaces.

At a fourth interface in the set of specialized interfaces is utilized to retrieve a credential from the security module created by the client. The credential is set by the client in the security module using a third interface in the set of specialized interfaces. A fifth interface in the set of specialized interfaces is utilized to retrieve a context from the security module at . The context is created by the security module using a combination of the principal name and the credential set by the client.

The context is invoked at to obtain security context information created in accordance with the security mechanism used by the client. The security context information the principal name and the credential are then transferred to the database server at . A determination is made at as to whether an authentication failure notice has been received from the database server. If an authentication failure notice has been received an error is reported to the client at .

If no authentication failure notice has been received a determination is made at as to whether mutual authentication is required. When mutual authentication is required security context information relating to the database server is authenticated at . A determination is then made at as to whether there has been an authentication failure. Error is reported to the database server at if authentication of the security context information relating to the database server has failed.

A determination is made at as to whether further authentication is required when it is determined at that mutual authentication is not required or when it is determined at that authentication of the security context information relating to the database server has not failed. Process returns to when further authentication is required. Otherwise a connection between the client and the database server is established at and the separate interface is invoked at .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one aspect the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include DVD compact disk read only memory CD ROM and compact disk read write CD R W .

Memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories that provide temporary storage of at least some program code in order to reduce the number of times the code must be retrieved from bulk storage during execution. As shown input output or I O devices including but not limited to keyboards displays pointing devices etc. are coupled to data processing system . I O devices may be coupled to data processing system directly or indirectly through intervening I O controllers not shown .

In the embodiment a network adapter is coupled to data processing system to enable data processing system to become coupled to other data processing systems or remote printers or storage devices through communication link . Communication link can be a private or public network. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

By providing the various interfaces in a database driver a variety of security mechanisms are supported as the database driver is able to utilize the interfaces to retrieve security information that is then authenticated by a database server prior to establishing a connection. In addition the database driver is able to leverage the interfaces to clean up resources used by the security mechanism after the connection is established. Thus a polymorphic model that interoperates well with any predefined and user defined security mechanism is provided.

Various implementations for connecting a client to a database server through a database driver have been described. Nevertheless one of ordinary skill in the art will readily recognize that various modifications may be made to the implementations and any variations would be within the spirit and scope of the present invention. For example the above described process flows are described with reference to a particular ordering of process actions. However the ordering of many of the described process actions may be changed without affecting the scope or operation of the invention. Accordingly many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the following claims.

