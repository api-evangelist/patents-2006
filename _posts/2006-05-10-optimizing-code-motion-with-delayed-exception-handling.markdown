---

title: Optimizing code motion with delayed exception handling
abstract: Systems, methods, media, and other embodiments associated with optimizing code motion with delayed exception handling are described. One exemplary system embodiment includes a data store to store information about a relocated instruction, a relocation logic to relocate instructions, and a run-time logic to detect exceptions raised by executed instructions. The run-time logic may selectively delay handling exceptions based on whether an executed instruction is a relocated instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930707&OS=07930707&RS=07930707
owner: Oracle International Corp.
number: 07930707
owner_city: Redwood Shores
owner_country: US
publication_date: 20060510
---
An optimizing compiler may move e.g. relocate code e.g. instruction code fragment in an executable to try to improve the performance of the executable. The compiler may record from where the code was moved and to where the code was moved. This may be done for example at the instruction level at the block level and so on.

Moving an instruction may change program semantics if the moved instruction raises an exception when executed in the new location. The semantics may change because the exception may be raised earlier than it would have been raised if the instruction was not moved. The semantics also may change if for example a computation is moved ahead of another statement to which the results of earlier statements and or exceptions matter even after an exception is raised. For example consider a statement that updates a database with results from an earlier statement. In this case the semantics of a program may be altered by an exception in the moved instruction unless the exception is delayed. Thus to both preserve order and to preserve certain results an exception raised by a moved instruction may be delayed.

To avoid this optimizing compilers have been limited in that they may not have moved code around other code that may raise an exception. In some environments e.g. PL SQL procedural language structured query language where some if not all instructions may raise an exception this may inhibit code motion entirely which is a severe limitation.

Systems methods and media associated with selectively delaying exceptions caused by relocated instructions are described. For instructions that are relocated to a point where they may be executed earlier than if located in their original position an exception may either be held in abeyance e.g. temporarily suspended delayed until a later point in time or selectively abandoned. If the precise location from which the instruction was relocated is known then the exception may be held until that precise location is reached. If only a region e.g. block from which the instruction was relocated is known then the exception may be held until that region is reached.

While the delayed exception is being held another instruction may also raise an exception. If this instruction is also a relocated instruction then this exception may also be held. However if this instruction is in its original location then the exception may be handled and delayed exceptions that are being held may be dismissed e.g. abandoned deleted since they may not have been raised if the relocated instruction had appeared in its original location.

An optimizing compiler or other code relocating logic may therefore create and or maintain data e.g. a table that relates locations from which instructions are moved and locations to which instructions are moved. A run time system may then consult this data when an instruction raises an exception. For relocated instructions exceptions may be delayed. For instructions in their original locations exceptions may be handled and delayed exceptions may be released.

A run time system may also determine whether an executable reaches a point from which an instruction was moved. If the run time system determines that an executable has reached a point from which an instruction was moved and that an exception has been delayed then the run time system may raise and handle the exception and may also dismiss other delayed exceptions.

Some compilers and or run time systems may operate in a partial redundancy elimination PRE environment. PRE is a compile time optimization. PRE may remove the same instruction from multiple locations and insert the same instruction at multiple other locations. For example PRE may remove I instruction from B block B and B and may insert I into B and B. In one embodiment blocks B B and B may be added to data describing blocks from which an instruction was relocated so that once of them is hit a delayed exception that occurred in B or B is handled. This is made possible since the theorem of PRE efficiency guarantees that a program will hit one of B B or B after block B or B. Otherwise inserting the instruction to B or B would be potentially redundant. Thus example delayed exception systems and methods facilitate more optimizing code motion at compile time even in a PRE environment.

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

 Computer component as used herein refers to a computer related entity e.g. hardware firmware software software in execution combinations thereof . Computer components may include for example a process running on a processor a processor an object an executable a thread of execution a program and a computer. A computer component s may reside within a process and or thread. A computer component may be localized on one computer and or may be distributed between multiple computers.

 Machine readable medium as used herein refers to a storage medium that stores instructions and or data that can be read by a machine e.g. computer . A machine readable medium may take forms including but not limited to non volatile media e.g. optical disk magnetic disk and volatile media e.g. semiconductor memory dynamic memory . Common forms of machine readable mediums include floppy disks hard disks magnetic tapes RAM Random Access Memory ROM Read Only Memory CD ROM Compact Disk ROM and so on.

 Data store as used herein refers to a physical and or logical entity that can store data. A data store may be for example a database a table a file a list a queue a heap a memory a register a disk and so on. In different examples a data store may reside in one logical and or physical entity and or may be distributed between multiple logical and or physical entities.

 Logic as used herein includes but is not limited to hardware firmware software stored on a machine readable storage medium and or combinations thereof to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include a software controlled microprocessor discrete logic e.g. application specific integrated circuit ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions and so on. Logic may include a gate s a combinations of gates other circuit components and so on. Where multiple logical logics are described it may be possible in some examples to incorporate the multiple logical logics into one physical logic. Similarly where a single logical logic is described it may be possible in some examples to distribute that single logical logic between multiple physical logics.

An operable connection or a connection by which entities are operably connected is one in which signals physical communications and or logical communications may be sent and or received. An operable connection may include a physical interface an electrical interface and or a data interface. An operable connection may include differing combinations of interfaces and or connections sufficient to allow operable control. For example two entities can be operably connected to communicate signals to each other directly or through one or more intermediate entities e.g. processor operating system logic software . Logical and or physical communication channels can be used to create an operable connection.

 Signal as used herein includes but is not limited to electrical signals optical signals analog signals digital signals data computer instructions processor instructions messages a bit a bit stream or other means that can be received transmitted and or detected.

 Software as used herein includes but is not limited to one or more computer instructions and or processor instructions that can be read interpreted compiled and or executed by a computer and or processor. Software causes a computer processor or other electronic device to perform functions actions and or behave in a desired manner. Software may be embodied in various forms including routines algorithms modules methods threads and or programs. In different examples software may be embodied in separate applications and or code from dynamically linked libraries. In different examples software may be implemented in executable and or loadable forms including but not limited to a stand alone program an object a function local and or remote a servelet an applet instructions stored in a memory part of an operating system and so on. In different examples computer readable and or executable instructions may be located in one logic and or distributed between multiple communicating cooperating and or parallel processing logics and thus may be loaded and or executed in serial parallel massively parallel and other manners.

Suitable software for implementing various components of example systems and methods described herein may be developed using programming languages and tools e.g. Java C C C SQL APIs SDKs assembler . Software whether an entire system or a component of a system may be embodied as an article of manufacture and maintained or provided as part of a machine readable medium. Software may include signals that transmit program code to a recipient over a network or other communication medium.

Some portions of the detailed descriptions that follow are presented in terms of algorithm descriptions and representations of operations on electrical and or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in hardware. These are used by those skilled in the art to convey the substance of their work to others. An algorithm is here and generally conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. The manipulations may produce a transitory physical change like that in an electromagnetic transmission signal.

It has proven convenient at times principally for reasons of common usage to refer to these electrical and or magnetic signals as bits values elements symbols characters terms numbers and so on. These and similar terms are associated with appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it is appreciated that throughout the description terms including processing computing calculating determining displaying automatically performing an action and so on refer to actions and processes of a computer system logic processor or similar electronic device that manipulates and transforms data represented as physical electric electronic magnetic quantities.

System may also include a relocation logic . Relocation logic may relocate a code section from a source location in an executable to a destination location in the executable . For example to optimize program performance a calculation or other instruction may be moved from an original location to a new location. To facilitate reacting to exceptions raised by relocated instructions relocation logic may store in the data store information associated with the source location and with the destination location. To facilitate determining that a location from where an instruction was relocated has been reached relocation logic may also associate an execution breakpoint with the source location. The execution breakpoint may be inserted for example by a debugger logic like those known to those skilled in the art.

System may also include a run time logic . Run time logic may detect an exception raised by an executed instruction in the executable . After detecting an exception run time logic may identify whether the executed instruction is a relocated instruction. In one example identifying whether the executed instruction is a relocated instruction includes comparing the address of the next instruction to be executed to a code section destination address stored in the data store . If the addresses match then the next instruction to be executed is a relocated instruction whose source and destination address were stored in the data store .

Run time logic may also selectively delay handling the exception if the executed instruction is a relocated instruction. In one example selectively delaying handling the exception includes storing data in the data store . The stored data may include for example delayed exception data associated with the exception. This delayed exception data may include for example an exception type an exception time an instruction that caused the exception source and or destination addresses associated with the exception and so on.

Delayed exceptions may go abandoned when other exceptions are raised. In one example one delayed exception will be raised while all the other delayed exceptions go abandoned. Thus run time logic may selectively abandon a delayed exception associated with an instruction previously executed in the executable. In one example selectively abandoning a delayed exception includes deleting data from the data store . The deleted data may include for example delayed exception data associated with the delayed exception. This delayed exception data may include for example an exception type an exception time an instruction that caused the exception source and or destination addresses associated with the exception and so on.

In system the run time logic of system may be an operating system . The operating system may include elements including a run time system an exception detecting system an exception handling system and so on. These systems may interact with data store to facilitate delaying handling of exceptions raised by relocated instructions in executable . For example these systems may place data in data store read and react to data stored in data store and or may remove data from data store . This data may include for example source addresses destination addresses delayed exception information and so on.

In one example executable may include executable instructions produced from a PL SQL procedural language structured query language source . Source may include a set of PL SQL statements that are compiled in a PRE partial redundancy elimination environment .

Example methods may be better appreciated with reference to flow diagrams. While for purposes of simplicity of explanation the illustrated methods are shown and described as a series of blocks it is to be appreciated that the methods are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be required to implement an example method. In some examples blocks may be combined separated into multiple components may employ additional not illustrated blocks and so on. In some examples blocks may be implemented in logic. In other examples processing blocks may represent functions and or actions performed by functionally equivalent circuits e.g. an analog circuit a digital signal processor circuit an application specific integrated circuit ASIC or other logic device. Blocks may represent executable instructions that cause a computer processor and or logic device to respond to perform an action s to change states and or to make decisions. While the figures illustrate various actions occurring in serial it is to be appreciated that in some examples various actions could occur concurrently substantially in parallel and or at substantially different points in time.

Method may also include at determining whether the operation that raised the exception is a relocated operation. This determination may be made for example by comparing a program counter to a relocated operation destination address. The relocated operation destination address may be available for example in a data store that was manipulated by a logic that relocated the operation.

If the operation raised an exception and the operation was a relocated operation then method may at cause exception handling to be delayed. In one example causing exception handling to be delayed includes storing data concerning the exception and the operation. The data may include for example an exception type an exception time a program counter value an operation identifier an operation source address an operation destination address and so on. This information may be stored for example with the data that facilitated identifying whether the operation was a relocated operation.

If the operation raised an exception but the operation was not a relocated operation then method will proceed at to selectively dismiss pending delayed exceptions and at to cause the raised exception to be handled. Dismissing a pending delayed exception may include for example manipulating and or deleting data associated with the pending delayed exception s . For example data including pending delayed exception types times relationships to relocated operations and so on may be manipulated and or deleted. Causing exception handling to occur may include for example generating a signal to an exception handling logic providing exception information to an exception handling logic and so on.

For example method may include at identifying whether an executing program has reached a relocated operation source. Identifying whether an executable has arrived at a relocated operation source may include for example detecting a break in execution caused by a break point comparing a program counter to stored relocation operation source addresses and so on. Additionally method may include at identifying whether there is a pending delayed exception associated with the relocated operation source. Identifying whether there is a pending delayed exception may include for example searching delayed exception data and so on. If the executable has arrived at a relocation source and there is an exception pending for that relocation source then method will proceed at to selectively dismiss a pending delayed exception s not associated with the relocated operation source. Dismissing a pending delayed exception may include for example deleting stored exception data. Based on the same determinations method will also proceed at to cause a pending delayed exception associated with the relocated operation source to be handled. This may include for example providing a signal to an exception handling logic providing exception information to an exception handling logic and so on.

In one embodiment of the invention actions associated with relocating operations may be performed. For example a portion e.g. instruction set of instructions of an executable program may be relocated from a first location in the executable program to a second location in the executable program. Since actions will be taken based on relocation sources and destinations data concerning an association between the relocated operation source and the relocated operation destination may be stored. Additionally to facilitate determining that an executable has reached a relocation source a break point may be associated with the relocated operation source and information about that break point may be stored.

While illustrates various actions occurring in serial it is to be appreciated that various actions illustrated in could occur substantially in parallel. By way of illustration a first process could determine whether an executing instruction is associated with a relocated source and thus whether an executable has reached a location associated with a relocated source. A second process could determine whether an exception was raised by an executed instruction and a third process could determine whether the executed instruction was a relocated instruction. Additionally fourth and or fifth processes could be tasked with causing an exception to be handled or delayed. While five processes are described it is to be appreciated that a greater and or lesser number of processes could be employed and that lightweight processes regular processes threads and other approaches could be employed.

In one example a method may be implemented as processor executable instructions. Thus in one example a machine readable medium may store processor executable instructions that if executed by a machine e.g. processor cause the machine to perform a method that includes selectively causing handling of the exception to be delayed upon determining that an operation has raised an exception and that the operation is a relocated operation. The method may also include selectively dismissing pending delayed exceptions and causing the raised exception to be handled upon determining that an operation has raised an exception and that the operation is not a relocated operation. The method may also include selectively dismissing pending delayed exceptions not associated with the relocated operation source and causing a pending delayed exception associated with the relocated operation source to be handled upon determining that an executing program has reached a relocated operation source and that there is a pending delayed exception associated with the relocated operation source. While the above method is described being stored on a machine readable medium it is to be appreciated that other example methods described herein may also be stored on a machine readable medium.

Generally describing an example configuration of computer processor may be a variety of various processors including dual microprocessor and other multi processor architectures. Memory may include volatile memory and or non volatile memory. Non volatile memory may include for example ROM PROM EPROM and EEPROM. Volatile memory may include for example RAM synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM and direct RAM bus RAM DRRAM .

Disk may be operably connected to the computer via for example an input output interface e.g. card device and an input output port . Disk may be for example a magnetic disk drive a solid state disk drive a floppy disk drive a tape drive a Zip drive a flash memory card and or a memory stick. Furthermore disk may be a CD ROM a CD recordable drive CD R drive a CD rewriteable drive CD RW drive and or a digital video ROM drive DVD ROM . Memory can store processes and or data for example. Disk and or memory can store an operating system that controls and allocates resources of computer .

Bus may be a single internal bus interconnect architecture and or other bus or mesh architectures. While a single bus is illustrated it is to be appreciated that computer may communicate with various devices logics and peripherals using other busses e.g. PCIE SATA Infiniband 1394 USB Ethernet . Bus can be types including for example a memory bus a memory controller a peripheral bus an external bus a crossbar switch and or a local bus. The local bus may be for example an industrial standard architecture ISA bus a microchannel architecture MSA bus an extended ISA EISA bus a peripheral component interconnect PCI bus a universal serial USB bus and a small computer systems interface SCSI bus.

Computer may interact with input output devices via i o interfaces and input output ports . Input output devices may be for example a keyboard a microphone a pointing and selection device cameras video cards displays disk network devices and so on. Input output ports may include for example serial ports parallel ports and USB ports.

Computer can operate in a network environment and thus may be connected to network devices via i o interfaces and or i o ports . Through the network devices computer may interact with a network. Through the network computer may be logically connected to remote computers. Networks with which computer may interact include but are not limited to a local area network LAN a wide area network WAN and other networks. In different examples network devices may connect to LAN technologies including for example fiber distributed data interface FDDI copper distributed data interface CDDI Ethernet IEEE 802.3 token ring IEEE 802.5 wireless computer communication IEEE 802.11 and Bluetooth IEEE 802.15.1 . Similarly network devices may connect to WAN technologies including for example point to point links circuit switching networks e.g. integrated services digital networks ISDN packet switching networks and digital subscriber lines DSL .

Interfaces in API can include but are not limited to a first interface that communicates a relocated instruction data. Relocated instruction data may include for example a source address a destination address a breakpoint identifier and so on. The interfaces may also include a second interface that communicates a delayed exception data. Delayed exception data may include for example a program counter value a relocated instruction source address an exception type and so on. The interfaces may also include a third interface that communicates an exception dismissal data. Exception dismissal data may include for example a list of pending exceptions to be dismissed a superceding exception identifier and so on.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim. Furthermore to the extent that the term or is employed in the detailed description or claims e.g. A or B it is intended to mean A or B or both . The term and or is used in the same manner meaning A or B or both . When the applicants intend to indicate only A or B but not both then the term only A or B but not both will be employed. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

To the extent that the phrase one or more of A B and C is employed herein e.g. a data store configured to store one or more of A B and C it is intended to convey the set of possibilities A B C AB AC BC and or ABC e.g. the data store may store only A only B only C A B A C B C and or A B C . It is not intended to require one of A one of B and one of C. When the applicants intend to indicate at least one of A at least one of B and at least one of C then the phrasing at least one of A at least one of B and at least one of C will be employed.

