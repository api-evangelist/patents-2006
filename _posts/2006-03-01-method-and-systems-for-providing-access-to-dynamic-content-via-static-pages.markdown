---

title: Method and systems for providing access to dynamic content via static pages
abstract: A system and method for providing access to dynamic content via static pages. A page or portion of a page is received containing at least one executable element and at least one static element. The at least one executable element is identified and then processed to produce output. A static page is created comprising the produced output. In some embodiments static elements linked to executable elements are replaced with static links referencing said executable elements. In other embodiments a page comprising a single form is created from a page comprising at least two forms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07877463&OS=07877463&RS=07877463
owner: Citrix Systems, Inc.
number: 07877463
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20060301
---
The present application claims priority to patent application Ser. No. 11 246 922 filed Oct. 7 2005 titled A Method and an Apparatus for Transforming Content from One Markup to Another Markup Language Non Intrusively Using a Server Load Balancer and a Reverse Proxy Transcoding Engine which is a continuation of patent application Ser. No. 10 123 098 filed Apr. 10 2002 titled A Method and an Apparatus for Transforming Content from One Markup to Another Markup Language Non Intrusively Using a Server Load Balancer and a Reverse Proxy Transcoding Engine which is itself a continuation in part of patent application Ser. No. 10 016 689 filed on Dec. 5 2001 and which claims priority to Provisional Patent Application No. 60 283 058 filed on Apr. 10 2001 all of which are commonly owned by the assignee of the present invention and the entire contents of which are expressly incorporated herein by reference.

The present invention is directed to Internet and computer network content delivery methodologies and more particularly to systems and methods for the delivery of dynamic content.

Content transmitted from a server to a client can be either dynamic or static. Static content typically does not include an executable element intended for execution by the client. Examples of static content include plain text images and standard form elements. Dynamic content typically includes an executable portion intended to be executed by the client the executable portion usually serving to modify content or take some action in response to a user action. Often an executable element will be linked with another content element for the purpose of modifying or updating that element in response to a user action. Examples of dynamic content include executable elements that populate or verify form entries executable elements that alter content elements in response mouse actions and executable elements that rewrite portions of a page for effective display in a given browser or window size.

For a number of reasons a server may not wish to transmit dynamic content to a given client. The client may lack the capability to process dynamic content lack the resources to process dynamic content efficiently or have a preference against dynamic content. A server may also wish to conceal certain executable code and operations from the client due to concerns of piracy or security breaches. A server may wish to ensure that content is delivered in a uniform fashion across clients who may process a given executable element differently. However even though a server may not wish to transmit dynamic content to a client the server may still wish to gain certain benefits of dynamic content such as form verification interactivity or user specific responses.

Because of the large amount of pre existing content that resides in dynamic form it would be impractical for a server administrator to manually rewrite all dynamic content into static form for the above scenarios. Further developing both static and dynamic methods for transmitting new content may also require considerable developer and administrator time. Thus there exists a need for automatically providing access to dynamic content via static pages while preserving the functionality and information contained in the dynamic content.

The present invention provides a mechanism by which dynamic content can be delivered to a client in static form. The invention allows the interactivity content and functionality of dynamic content to be preserved in an environment that does not support or does not desire dynamic content viewing. Further the invention automates this process of transforming dynamic content to static content which enables the transformation to be accomplished with minimal developer resources or effort.

In one aspect the invention relates to a method for delivering dynamic content via static pages. The method comprises receiving a page or portion of a page of content comprising at least one static element and at least one executable element identifying at least one executable element processing said at least one executable element to produce output and creating a static page comprising the produced output.

In one embodiment the page or portion of a page of content is received from a network. In another embodiment the identifying at least one executable element comprises identifying at least one element comprising Javascript. In another embodiment processing said at least one executable element to produce output comprises executing said executable element to produce output. In another embodiment processing said at least one executable element to produce output comprises removing said executable element to produce output.

In another embodiment the method comprises receiving a page or portion of a page of content comprising at least one element linked to an executable element identifying at least one executable element replacing said element linked to the executable element with a static link containing a reference to said executable element in the produced output receiving an indication that said static link has been selected identifying the executable element referenced by said link executing said executable element to produce output and creating a static page comprising the produced output.

In another aspect the invention relates to a server system for providing access to dynamic content said server system comprising a storage buffer which receives a page or portion of a page of content comprising at least one static element and one executable element and a processor in communication with said storage buffer which identifies said at least one executable element processes said at least one executable element to produce output and creates a static page comprising the produced output.

In one embodiment the storage buffer receives the page or portion of a page of content from a network. In another embodiment the processor identifies at least one executable element comprising Javascript. In another embodiment the processor processes said at least one executable element to produce output by executing said executable element to produce output. In another embodiment the processor processes said at least one executable element to produce output by removing said executable element to produce output.

In another embodiment the server system comprises a storage buffer which receives a page or portion of a page of content comprising at least one element linked to an executable element a processor which identifies at least one executable element replaces said element linked to the executable element with a static link containing a reference to said executable element in the produced output an input which receives an indication that said static link has been selected and a processor that identifies the executable element referenced by said link executes said executable element to produce output and creates a static page comprising the produced output.

Referring now to an example of a computer network is shown. In brief overview a server communicates with a network and with a number of clients collectively over a second network .

The server may comprise any device capable of processing information and sending and receiving information including a standalone computer server a blade server a rack mounted server or a group of any types of said servers.

In the embodiment shown the server is connected to networks . The networks may comprise the Internet local networks web servers file servers routers databases computers servers network appliances or any other computing devices capable of sending and receiving information. The networks may comprise computing devices connected via cables IR ports wireless signals or any other means of connecting multiple computing devices.

The networks and any devices connected to the networks may communicate via any communication protocol used to communicate among or within computing devices including without limitation SSL HTML XML RDP ICA FTP HTTP TCP IP UDP IPX SPX NetBIOS NetBEUI SMB SMTP Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEE 802.11b IEEE 802.11g and direct asynchronous connections or any combination thereof. The networks may comprise mobile telephone networks utilizing any protocol or protocols used to communicate among mobile devices including AMPS TDMA CDMA GSM GPRS or UMTS. The networks may comprise physically distinct networks as shown in or the networks may comprise the same network and may be connected using any topology.

In embodiments comprising a TCP IP based communications among any of the above devices any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. Any type and form of transport control protocol may also be used such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCPSACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used.

The server may communicate with other servers via networks . The server may also communicate with one or more clients . In some embodiments the server communicates directly with the client . A client may comprise a computer a laptop computer an internet kiosk mobile device such as a PDA mobile phone or palmtop computer or any other computing device capable of sending and receiving information. The client may also comprise another application or applications executing on the same physical machine as the server .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. the Crusoe and Efficeon lines of processors manufactured by Transmeta Corporation of Santa Clara Calif. the lines of processors manufactured by International Business Machines of White Plains N.Y. or the lines of processors manufactured by Advanced Micro Devices of Sunnyvale Calif.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computer system in which the processor communicates directly with main memory via a memory port. For example in the main memory may be DRDRAM.

In the embodiment shown in the processor communicates with various I O devices via a local system bus . Various busses may be used to connect the central processing unit to the I O devices including a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. For embodiments in which the I O device is an video display the processor may use an Advanced Graphics Port AGP to communicate with the display. depicts an embodiment of a computer system in which the main processor communicates directly with I O device via HyperTransport Rapid I O or InfiniBand. also depicts an embodiment in which local busses and direct communication are mixed the processor communicates with I O device using a local interconnect bus while communicating with I O device directly.

A wide variety of I O devices may be present in the computer system . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. An I O device may also provide mass storage for the computer system such as a hard disk drive a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats and USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

General purpose computers of the sort depicted in and typically operate under the control of operating systems which control scheduling of tasks and access to system resources. Typical operating systems include MICROSOFT WINDOWS manufactured by Microsoft Corp. of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah among others.

For embodiments in which the client is a mobile device the device may be a JAVA enabled cellular telephone such as the i55sr i58sr i85s or the i88s all of which are manufactured by Motorola Corp. of Schaumburg Ill. the 6035 or the 7135 manufactured by Kyocera of Kyoto Japan or the i300 or i330 manufactured by Samsung Electronics Co. Ltd. of Seoul Korea. A typical mobile device may comprise many of the elements described in including the processor and the main memory .

In other embodiments in which the client is a mobile device it may be a personal digital assistant PDA operating under control of the PalmOS operating system such as the Tungsten W the VII the VIIx the i705 all of which are manufactured by palmOne Inc. of Milpitas Calif. In further embodiments the client may be a personal digital assistant PDA operating under control of the PocketPC operating system such as the iPAQ 4155 iPAQ 5555 iPAQ 1945 iPAQ 2215 and iPAQ 4255 all of which manufactured by Hewlett Packard Corporation of Palo Alto Calif. the ViewSonic V36 manufactured by ViewSonic of Walnut Calif. or the Toshiba PocketPC e405 manufactured by Toshiba America Inc. of New York N.Y. In still other embodiments the client is a combination PDA telephone device such as the Treo 180 Treo 270 Treo 600 Treo 650 or the Treo 700w all of which are manufactured by palmOne Inc. of Milpitas Calif. In still further embodiments the client is a cellular telephone that operates under control of the PocketPC operating system such as the MPx200 manufactured by Motorola Corp. A typical combination PDA telephone device may comprise many of the elements described below in including the processor and the main memory .

Referring now to one embodiment of a method for providing access to dynamic content is shown. In brief overview a server node receives a page or portion of a page of content comprising at least one static element and at least one executable element step . The server identifies the at least one executable element step . The server then processes said at least one executable element to produce output step and creates a static page comprising the produced output step . The server transmits the created page to a client step and then receives an indication that a static link from the created page has been selected step . The server then identifies an executable element referenced by said static link step processes said executable element to produce output step and creates a static page comprising the produced output step .

Still referring to and in more detail in one embodiment the page or portion of a page of content comprising at least one static element and at least one executable element is received step from a network . In some embodiments the page may be received from a file server web server application server file system database or any combination thereof. In some embodiments the page may be read from a disk or other storage media retrieved from a cache received from another application or any combination thereof.

The page or portion of a page received may comprise HTML XML or any language or definition for specifying a page or portion of a page of content. The at least one executable element may be written in any executable scripting or coding language such as Javascript Dynamic HTML Ajax Java Flash SVG or any other executable scripting or coding language. The static element may comprise any non executable element of a page including plain text HTML XML input elements an image file or any other data or display element.

In some embodiments the server receives a page or portion of a page comprising at least one static element linked to an executable element. In some embodiments this static element linked to an executable element may comprise an HTML or XML element with an associated Javascript or other executable element. In some embodiments this association between the HTML or XML element and the executable element may comprise a reference to the executable element in the HTML or XML element s onmouseover onmouseout onclick onsubmit onfocus onfocuslost or onselect attribute. In other embodiments this association between the HTML or XML element and the executable element may comprise any other format or notation indicating that said executable element should be accessed upon a given user or global event. In other embodiments the static element linked to an executable element may comprise any other static element of a page with a format notation or convention indicating that said executable element should be accessed upon a given user or global event.

In other embodiments the server receives a page or portion of a page comprising an executable element and at least two forms. The forms may comprise HTML elements or any other means for specifying sets of content and input elements that are intended to be treated as a unit for some purpose. In other embodiments the server may receive any combination of static elements linked to executable elements and multiple form elements.

After receiving the page or portion of a page of content step the server identifies the at least one executable element step . In some embodiments the server identifies the executable element step by recognizing tags specific to executable elements including but not limited to Javascript tags HTML elements XML tags or tags inserted by the page creator to identify executable elements. In other embodiments this identification step may comprise other forms parsing the page content for functions methods scripts binary files or other executable content such as syntax checking context sensing or any other means of distinguishing executable elements from static elements.

After identifying the at least one executable element step the server processes said at least one executable element to produce output step . In some embodiments the server executes the executable element to produce output. In one embodiment this execution may comprise executing Javascript. In other embodiments this execution may comprise executing a function or script defined in the onload attribute of an HTML page. In some embodiments the output produced by executing the executable element may comprise values for HTML elements HTML text or HTML page formatting parameters. In other embodiments the output produced may comprise a Javascript alert dialog or a dialog generated by any other scripting language. In other embodiments the output produced may comprise a value indicating whether a given element or form has been correctly populated. In still other embodiments the output produced may be a URL location. In still other embodiments the output produced may be content accessed from another location which may comprise a database web server file server or any other location capable of transmitting content in response to a request from an executing script.

In some embodiments processing the executable element to produce output step may comprise removing the executable element. In some embodiments removal of the executable element step may comprise the complete excision of the executable element from the page or portion of a page. In other embodiments removal may comprise enclosing the executable elements in comments braces brackets or other means of indicating that the executable element is not intended to be executed. In still other embodiments removal of an executable element may comprise deleting references or links to an executable element from other elements of the page. In some embodiments such deletion may comprise removing references to an executable element from HTML elements including or elements or any other HTML elements. In other embodiments such deletion may also comprise removing references to an executable element contained in XML elements or any other static elements containing references or links to an executable element. In still other embodiments processing an executable element to produce output step may comprise any combination of executing an executable element and removing an executable element.

In some embodiments processing of said at least one executable element may also comprise storing said executable element for later access. In some embodiments the server may store the executable element such that the executable element can be accessed later in response to a client request. In some embodiments the server may store the executable element in a table with entries corresponding to pages accessed by a given client. In other embodiments the server may store the executable element in a hash table with entries corresponding to the names of the executable element. In other embodiments the sever may store the executable element as part of a Document Object Model DOM for the said page or portion of a page received. The server may store the DOM along with a unique client or session identifier such that the DOM and the executable element can be accessed in response to further client requests. In other embodiments processing an executable element may comprise updating a stored DOM in response to either executing or otherwise processing said executable element. In still other embodiments the server may store a link to a location where the executable element can be accessed. In other embodiments the executable element may be stored along with a copy of the page or portion of a page of content received.

In some embodiments processing of said least one executable element may also comprise sending and or receiving a request. Said request may be transmitted over any of the networks or connections previously discussed and may comprise any of the protocols previously discussed. Said request may be sent from or to any of the computing devices previously discussed. In some embodiments the server may send a request as part of executing the executable element. In some embodiments the server may send an HTTP POST request to a server in order to pass along data previously received by the server in an HTTP POST request from the client . In other embodiments the server may send any other type of request in response to data received from the client .

After processing said executable element to produce output step the server creates a static page comprising the produced output step . In some embodiments creating a static page comprising the produced output step comprises creating a static page comprising the output produced from executing an executable element. In some embodiments this static page may comprise all the elements from the original page or portion of a page or the static page may comprise a subset of said elements. In some embodiments the static page may comprise static elements that have been modified as a result of executing an executable element step . In other embodiments creating a static page comprising the produced output step comprises creating a static page comprising the output produced by removing an executable element. In still other embodiments this creating a static page comprises removing links to executable elements. In some embodiments the created page may comprise an HTML GET or POST request to be transmitted to a web server or other computing device. In some embodiments the created page may comprise an HTTP request for a resource from a web server or other computing device.

In some embodiments creating a static page comprising the produced output step comprises replacing a static element linked to an executable element with a static link referencing said executable element. In some embodiments said replacement comprises removing a link to an executable element from an HTML attribute and inserting a static HTML link with an href attribute comprising notations allowing the server to identify said executable element upon receipt of an HTTP request for said link. In other embodiments said replacement comprises removing a link to an executable element from an HTML attribute and also modifying the action attribute of an HTML tag to comprise notations allowing the server to identify said executable element upon submission of said form.

In other embodiments creating a static page comprising the produced output step comprises creating a static page comprising a combination of at least two forms. In some embodiments said creation comprises moving all form elements into a single form and renaming all elements so as to avoid name collisions in the single form. Said renaming may comprise appending the name of the original form from which the form elements came to the beginning or end of each element name or any other means of providing a unique identifier for each element. In some embodiments the form elements or attributes of the form elements may also be renamed such that the original form from which the form elements came can be easily identified.

After the static page is created step the page may then be transmitted step to a client . Such transmission may occur over any of the communication protocols discussed above and over any of the connection means previously discussed.

The client may then display process or otherwise handle the created static page step . In some embodiments the client may view the created static page with any HTML WML or XML browser. In some embodiments the client may view the created static page from within a mail client document editor or any other application used for viewing or processing content. In other embodiments the client may process the created static page such as with automated scripts.

The client may then request a static link referencing an executable element step . The client may request the static link step as a result of a user clicking on a hypertext link in a standard web browser interface. The request may also occur as a result of a user clicking on an HTML button checkbox image menu item or any other HTML element in a web browser interface. The client may request the static link step as a result of executing an automated script a prefetch routine or any other automatic means of requesting content prior during or after page display. The client may transmit the request step to the server via any of the communication protocols described herein and via any of the networks or connections described herein.

The server then may receive an indication that a static link referencing an executable element has been selected step . Said indication may occur over any of the communication protocols and networks previously discussed. In some embodiments such indication may comprise an HTTP request from the client for said static link. In other embodiments the indication may comprise a message or notification from another computing device in communication with the client that the static link has been selected by the client. In some embodiments the notification that the link has been selected may be accompanied by other data including without limitation information in a POST GET or any other HTML request URLs information about client state information about connection state timestamps headers or any other information communicated from the client or any intermediary between the client and the server .

Upon receiving an indication that said static link referencing an executable element has been selected step the server may then identify the executable element referenced by said static link step . In some embodiments the server may identify said executable element by parsing the URL of an HTTP request to determine a name or other unique identifier of said executable element. In some embodiments the server may then retrieve said executable element from a table list database or any other storage means discussed previously for storing either an executable element or a link to an executable element.

After identifying the executable element referenced by said static link step the server may then process said executable element to produce output step . Said processing may comprise any of the previously discussed embodiments of processing an executable element to produce output.

After processing said executable element to produce output step the server may then create a static page comprising the produced output step . The server may create said static page according to any of the previously discussed embodiments for the creation of a static page comprising produced output.

After creating the static page step the server may then transmit the page step to the client . The transmission may occur via any of the previously discussed means for transmitting a page or portion of a page.

The page may then be displayed step by the client . The client may display the page or portion of a page using any of the previously discussed means for displaying a page or portion of a page.

Referring now to a detailed example of one embodiment of replacing a static element linked to an executable element with a static link referencing said executable element is shown. An initial HTML page is shown. The page comprises a script containing a Javascript function and an input button linked to the Javascript function . In a standard web browser clicking the button would cause the Javascript function to execute and display the current time.

In the embodiment shown the server receives the page comprising a static element linked to an executable element step . The server identifies the executable element step . The server may identify the executable element using any or all of the previously discussed methods for identifying an executable element. For example in the embodiment shown in the server may parse the HTML page to locate tags in the page.

In the embodiment shown the server then processes the executable element to produce output step . The processing comprises removing the executable element . The processing may also comprise storing a copy of said executable element using any of the methods previously discussed such that the server can execute the Javascript function later in response to a client request.

In the embodiment shown the server then creates a static page comprising the produced output step . The created static page contains no executable element as both the script tags and the Javascript function have been removed. The static element linked to the Javascript function has been replaced with a static HTML link comprising a reference to said Javascript function. The reference to the Javascript function in the static link includes the function name such that the server can identify the function that should be accessed if the server receives a request for the static link . In the embodiment shown said reference also comprises the word transcoder which may be used as a special tag to denote that the link references an executable element.

Referring back to the server may then transmit the created page to a client step . The client may then display the page or portion of a page step . The client may then request a static link referencing an executable element step . In the embodiment shown when the link is clicked in a standard browser a request will be sent from the browser for the address of transcoder showTime. step 

In the embodiment shown in the server may then receive an indication that a static link has been selected step . The server may receive an HTTP GET request with an address of transcoder showTime. 

In the embodiment shown in the server may then identify the executable element referenced by the requested link step . Here transcoder is a word indicating that a link references an executable element. The server can then recognize that the request comprising the word transcoder is directed towards an executable element and identify the specific executable element . In the embodiment shown the server may then parse the request to find the name of the referenced executable element here showTime.

In the embodiment shown in after identifying the referenced executable element step the server may then process the executable element to produce output step . The server may execute the showTime function . The server may also update and or store any variables elements or other data associated with executing the showTime function .

In the embodiment shown in the server may then create a static page comprising the produced output step . The server may create a static page comprising a HTML element that will display the current time. The static page may comprise any or all of the elements comprising the first static page transmitted to the client step .

In the embodiment shown in the server may then transmit the newly created static page to the client step . The client may then display the page showing the updated time step .

Referring now to a detailed example of one embodiment of replacing a static element linked to an executable element with a static link referencing said executable element is shown. An initial HTML page is shown. The page comprises a script containing a Javascript function two HTML elements two HTML text input elements and two HTML submit buttons . In a standard web browser a user could enter text into either of the text entry fields . If the user then clicked on either of the submit buttons the checkEntry function would be called and then the contents of the form containing the clicked submit button would be submitted to the location specified in the element s action attribute here page.html or page2.html depending on which submit button was clicked.

In the embodiment shown the server receives the page comprising two forms and two static elements in which the two static elements are linked to an executable element step . In the embodiment shown the server identifies the executable element step . The server may identify the executable element using any or all of the previously discussed methods for identifying an executable element.

In the embodiment shown the server then processes the executable element to produce output step . The processing comprises removing the executable element . The processing may also comprise storing a copy of said executable element using any of the methods previously discussed such that the server can execute the Javascript function later in response to a client request. The processing may also comprise storing a complete copy of the page or any of the page s components for later access using any of the methods previously discussed including the use of a DOM.

In the embodiment shown the server then creates a static page comprising the produced output step . The created static page contains no executable element as both the script tags and the Javascript function have been removed. The second form element has been removed such that all the HTML input elements reside within a single HTML form element The action attribute of the combined form has been modified to point to the link transcoder checkEntry. Said link comprises the word transcoder which may be used as a special tag to denote that the link contained in the form element references an executable element. The links to the Javascript function have been removed from the two form submit buttons . The two submit buttons and have also been given value attributes with the names of their respective forms. In the event either button is clicked on a standard web browser will include the value attribute of the clicked submit button along with the form contents. By assigning unique value attributes to each submit button the server may identify which button was pressed to trigger a submission.

Referring once again to the server may then transmit the created page to a client step . The client may then display the page or portion of a page step . The client may then request a static link referencing an executable element step . In a standard web browser when either of the submit buttons is pressed an HTML POST request will be sent from the browser to the address of transcoder checkEntry. The browser will include in the request any data corresponding to the values of the input elements in the form .

In the embodiment shown in the server may then receive an indication that a static link has been selected step . The server may receive an HTTP POST request with an address of transcoder checkEntry as described above.

In the embodiment shown in the server may then identify the executable element referenced by the requested link step . Here transcoder is a word indicating that a link references an executable element. The server can then recognize that the request comprising the word transcoder is directed towards an executable element and identify the specific executable element . In the embodiment shown the server may then parse the request to find the name of the referenced executable element here checkEntry.

In the embodiment shown in after identifying the referenced executable element step the server may then process the executable element to produce output step . The server may execute the checkEntry function . The server may also update and or store any variables elements or other data associated with executing the checkEntry function . The server may also retrieve a copy of the original page or a DOM of the original page in order to determine any further processing. The server may after executing the checkEntry function create an HTTP POST request comprising data corresponding to any or all of the form elements and transmit said request to the address of page.html. This additional processing would enable the form submission data to be passed back to the server designated by the original form .

In the embodiment shown in the server may then create a static page comprising the produced output step . The server may create a static page comprising elements modified by the checkEntry function. The server may also create a static page comprising content received in a response to an HTTP POST request sent as part of the previous step step . The static page may also comprise any or all of the elements comprising the first static page transmitted to the client step .

In the embodiment shown in the server may then transmit the newly created static page to the client step . The client may then display the page step .

Referring now to a diagram of an embodiment in which some or all of the functionality of the server node is incorporated within a network appliance is shown. The sever node may operate on the same or different hardware than the rest of the network appliance . The server node may share RAM disk space processors or any other computing resource with any or all of the other functionality provided in the network appliance .

The network appliance may perform any function related to providing services to clients including without limitation firewall services SSL pooling and acceleration TCP pooling and acceleration data compression connection monitoring application logging application acceleration application delivery load balancing caching virtualization translation redirection connection pooling proxy services reverse proxy services authentication and session management. In the embodiment shown said network appliance receives requests from a client . The network appliance may process requests in accordance with any of the previously described network appliance functions. The network appliance may also transmit some or all requests to a server node for processing. The network appliance may also transmit requests to a content server. The network appliance may receive pages or portions of pages from a content server . The network appliance may process the pages or portions of pages in accordance with any of the previously described network appliance functions. The network appliance may also transmit some or all pages or portions of pages received to a server node for processing. The network appliance may also transmit pages or portions of pages to a client .

In the embodiment shown a content server receives requests and transmits pages or portions of pages of content . The content server may be directly connected to the network appliance or the content server may communicate with the network appliance in any of the methods previously discussed and over any of the networks previously discussed. The content server may transmit pages or portions of pages written in any of the languages previously discussed and comprising any of the elements previously discussed.

Referring now to one embodiment of a method for providing access to dynamic content on a network appliance is shown. Said method may be performed by any of the machines or combinations of machines described above although the embodiment below describes the method being performed by a network appliance. In brief overview the method comprises receiving a request from a client for a resource step sending a request for said client s capabilities step and receiving information conveying said client s capabilities step . The method also comprises receiving a page or portion of a page of content comprising at least one static element and at least one executable element step identifying the at least one executable element step processing said at least one executable element in accordance with said client s capabilities to produce output step and creating a static page comprising the produced output step .

Still referring to now in greater detail the network appliance receives a request from a client step . In one embodiment receiving a request from a client step comprises receiving a request directly from a client. In other embodiments the request from a client may be received from any of the networks connections and appliances previously discussed. Said request may comprise any of the protocols previously discussed. In some embodiments the request may comprise the request exactly as transmitted from the client . In other embodiments the request may comprise a modification of an original request from a client . Said modifications may comprise modifications in the course of providing any of the network appliance services discussed above and any other modifications to the content format protocol addressing headers or other portions of the request. request from a client or a new request. A request may comprise a resource directly requested by a client and it may comprise a resource requested in the course of performing any service for the client .

After receiving a request from a client step the network appliance sends a request for said client s capabilities step . In one embodiment said request may be sent to the client . In another embodiment request may be sent to a collection agent as described in U.S. patent application Ser. No. 10 956 832 A METHOD AND APPARATUS FOR ASSIGNING ACCESS CONTROL LEVELS IN PROVIDING ACCESS TO NETWORKED CONTENT FILES whose contents are expressly incorporated herein by reference. Said collection agent may reside on the same physical machine as the network appliance sending the request or they may reside on different physical machines. Said request may also be sent to a file a cache a database a server an executing application or any other source of information concerning the client .

After sending a request for the client s capabilities step the network appliance receives information conveying said clients capabilities step . Said information may be received from a client a collection agent a file a cache a database a server an executing application or any other source of information concerning the client . Said information may comprise without limitation machine ID of a client node operating system type existence of a patch to an operating system MAC addresses of installed network cards a digital watermark on the client device membership in an Active Directory existence of a virus scanner existence of a personal firewall an HTTP header browser type device type network connection information authorization credentials and any of the other capabilities or preferences discussed above. In some embodiments the network appliance may store or cache said information for later retrieval.

In the embodiment shown the network appliance receives a page or portion of a page of content comprising at least one static element and at least one executable element step and identifies the at least one executable element step according to any of the embodiments previously discussed. The network appliance may receive the page or portion of a page step either before or after receiving the request from a client for a resource step either before or after sending a request for said client s capabilities step and either before or after receiving information conveying said client s capabilities step .

After identifying the at least one executable element step the network appliance processes said at least one executable element in accordance with said client s capabilities step . In some embodiments said processing of the executable element may be responsive to information received about a client s status preferences or capabilities. In these embodiments the network appliance may process said executable element in response to information including without limitation machine ID of the client node operating system type existence of a patch to an operating system MAC addresses of installed network cards a digital watermark on the client device membership in an Active Directory existence of a virus scanner existence of a personal firewall an HTTP header browser type device type network connection information and authorization credentials.

For example in one embodiment the network appliance might remove executable elements that consumed large portions of RAM in accordance with information that a client has limited memory capabilities. In another embodiment the network appliance might remove any executable elements that processed or transmitted sensitive information in accordance with information that a client is operating on an unsafe network or computer. In still another embodiment the network appliance might remove any executable elements which might provide functionality for modification in accordance with information that a client does not have authorization to modify a given page.

After processing the at least one executable element in accordance with said client s capabilities step the network appliance creates a static page comprising the produced output step . Said creation may be done by any of the means previously discussed. Further said creation may also be in accordance with the information conveying said client s capabilities.

While the invention has been particularly shown and described with reference to specific preferred embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein departing from the spirit and scope of the invention as defined by the appended claims.

