---

title: Permitting multiple tasks requiring elevated rights
abstract: System(s), method(s), and/or technique(s) (“tools”) are described that enable a user to permit multiple tasks requiring elevated rights with as little as one rights elevation. For example, the tools may enable an installation wizard operating within a limited-rights context to perform multiple tasks that require a higher-rights context with a single rights elevation by the user. The tools may do so using an object agent, an instance of which may be created by the installation wizard following a single rights elevation. This instance of the object agent then creates instances of other objects without requiring that the user elevate his or her rights. These other objects' instances may then run the tasks that require the higher-rights context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941861&OS=07941861&RS=07941861
owner: Microsoft Corporation
number: 07941861
owner_city: Redmond
owner_country: US
publication_date: 20060217
---
Generally two types of accounts are used to log a user on to a computer s operating system. One has nearly unlimited rights often called an administrator account the other has limited rights often called a standard user account. Standard user accounts permit some tasks but prohibit others such as installing an application or altering the computer s system settings. Administrator accounts on the other hand generally permit most if not all tasks.

Not surprisingly many users log on to their computers with administrator accounts so that they may do nearly whatever they want. But there are significant risks involved in using administrator accounts. Malicious code may perform whatever tasks are permitted by the account currently in use such as installing and deleting applications and files potentially highly damaging tasks. This is because most malicious code performs its tasks while impersonating the current user of the computer thus if a user is logged on with an administrator account the malicious code may perform dangerous tasks permitted by that account.

To reduce these risks a user may instead logon with a standard user account. Logging on with a standard user account may reduce these risks because is the standard user account may not have the right to permit malicious code to perform many dangerous tasks. If the standard user account does not have the right to perform a task the operating system may prohibit the malicious code from performing that task. For this reason using a standard user account may be safer than using an administrator account.

If a user is using a standard user account he or she may still perform tasks requiring higher rights by elevating his or her rights when needed for a particular task. Assume for example that a user wants to install a video card on his or her computer. To do so the video card needs to run an installation wizard. This wizard uses two tasks each of which requires administrator rights. To allow the wizard to install the video card the user will typically need to elevate his or her rights for the first task and then elevate his or her rights again for the second task.

System s method s and or technique s tools are described that enable a user to permit multiple tasks requiring elevated rights with as little as one rights elevation. For example the tools may enable an installation wizard operating within a limited rights context to perform multiple tasks that require a higher rights context with a single rights elevation by the user. The tools may do so using an object agent an instance of which may be created by the installation wizard following a single rights elevation. This instance of the object agent then creates instances of other objects without requiring that the user elevate his or her rights. These other objects instances may then run the tasks that require the higher rights context.

This Summary is provided to introduce a selection of concepts in a is simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The same numbers are used throughout the disclosure and figures to reference like components and features.

The following document describes tools capable of enabling a user to permit multiple tasks requiring elevated rights with as little as one rights elevation. This may improve a user s experience by reducing how many times he or she needs to elevate his or her rights. Reducing how many times users elevate their rights may also improve security because users are less likely to be desensitized. When users become desensitized to elevating their rights they may elevate without considering the consequences.

An environment in which the tools may enable these and other actions is set forth below in a section entitled Exemplary Operating Environment. This section is followed by another describing exemplary ways in which the tools build object agents entitled Building an Exemplary Object Agent. Another section follows and describes exemplary ways in which the tools use an object agent to enable a user to permit multiple tasks requiring elevated rights with as little as one rights elevation. This section is entitled Using an Exemplary Object Agent. The overview section titles and summaries are provided for the reader s convenience and are not intended to limit the scope of the claims or the entitled sections.

Before describing the tools in detail the following discussion of an exemplary operating environment is provided to assist the reader in understanding ways in which various inventive aspects of the tools may be employed. The environment described below constitutes but one example and is not intended to limit application of the tools to any one particular operating environment. Other environments may be used without departing from the spirit and scope of the claimed subject matter.

The operating system is capable of managing the rights contexts of various processes operating or capable of operating on the computing device as will be appreciated by the skilled artisan. When a user logs on with an account that does not have unlimited rights in a particular context where elevated rights would be useful the operating system may use the elevation module to enable the user to elevate his or her rights. For example if a user logs on with an account having limited rights e.g. a standard user account or multiple tiers of rights e.g. an account capable of higher rights such as administrator level rights but currently using a filtered token with limited rights certain tasks may not be permitted. To permit the task the elevation module provides in accordance with one embodiment a user interface enabling the user to elevate his or her rights. A user may select to raise the rights context from a limited rights tier to a higher rights tier of a multi tiered account for a particular task. Alternately or additionally a user may enter credentials to use another account having higher rights to perform a particular task.

The computer readable media also comprises the application which may operate within a limited rights context. The application may use multiple tasks needing a higher rights context than those in which the application operates each an elevated task . These elevated tasks can be distinct from each other and in this example each is associated with one of the elevated objects. In this particular example each elevated task may be a distinct piece of code that may require higher rights to succeed.

In the illustrated and described embodiment instances of each of the elevated objects are each capable of performing an elevated task if each is operating within a sufficiently high rights context. These instances may be created by the application with an Elevation Moniker EM call. The Elevation Moniker call is a public API. In some cases a Co create instance As Administrator a CCIaa call may be made to create and use an Elevation Moniker. Each Elevation Moniker call may require that the elevation module receive the user s assent to elevate his or her rights for each of the elevated objects if the process from which the Elevation Moniker call is called has insufficient rights. These elevated objects may be generally available or custom built. An instance of each may also be created using parameters particular to each.

The application may instead create an instance of the object agent however. This instance of the object agent may be created in some cases with a single Elevation Moniker call enabling the user to interact with a single elevation process. The single elevation process may comprise a single dialog enabling a user action e.g. selecting a button or entering credentials or a more complex user interface having multiple user interactions.

As set forth below each of these elevated objects may be a COM object an instance of which is created by the object agent with a CoCreateInstance CCI call as will be appreciated by the skilled artisan. The object agent may use a CCI call which does not require that the elevation module receive the user s assent to elevate his or her rights because the object agent resides in an equivalent or higher rights context.

The agent module is capable of building the object agent and will be described in greater detail as part of flow diagram set forth below.

The following discussion describes exemplary ways in which the tools build an object agent in accordance with one embodiment. This discussion refers to particular elements such as elements of operating environment of though other elements and environments may be used.

When a programmer builds a software application that uses elevated tasks the programmer may use elevated objects capable of performing those tasks. Instances of these elevated objects are created by the software application when the software application is executed. These instances then perform the elevated tasks.

For example if a programmer wants to build an installation wizard application for installing a video card the programmer may need distinct elevated tasks. One task may be to change a computing device s display settings. Another task may be to write display configuration information to the computing device s system registry. The programmer may build the installation wizard such that it creates instances of elevated objects capable of performing these tasks such as a display settings object and a system registry configuration object.

These tasks and their associated objects however may use a high level of rights such as administrator level rights or rights granted by a middle or top tier of a multi tiered account. To create an instance of each of these objects the user may then need to elevate his or her rights for each object. If an application needs to create instances of many different elevated objects the user may have to elevate is many times which is disruptive.

The tools described above and below enable a programmer to build an object agent. An instance of this object agent can create instances of elevated objects needed by an application. In one embodiment for example an instance of the object agent is created with a single rights elevation after which multiple elevated objects are created via the object agent instance without additional rights elevations. In this embodiment one elevation is used to create the instance of the object agent rather than one elevation for each elevated object.

At arrows and agent module receives selection of elevated objects and here with parameters and associated with these elevated objects and respectively. Parameters through are capable of indicating which elevated object through is which such as information sufficient for an instance of each elevated object to be created separately. These parameters and elevated objects may be created by a programmer from which they are received may be generally available or may be exposed by the tools and then selected by the programmer.

A programmer of the installation wizard mentioned above for example may select an elevated object e.g. through a graphical user interface that in turn provides parameters for each or directly with the parameters that is capable of changing a computing device s display settings and selecting another elevated object capable of writing display configuration information to a computing device s system registry. These elevated objects and their parameters are illustrated in part in . Elevated object is a display setting elevated object Object A and elevated object is a system registry configuration elevated object Object B . These have parameters P and P shown at and respectively.

Parameters through for other elevated objects through respectively may also be received by the agent module not shown . A programmer may select many different elevated objects to perform many different elevated tasks such as an arbitrary number of parameters up to n number of parameters for an arbitrary number of elevated objects up to n objects .

At arrow the agent module builds object agent . An instance of the object agent may later be called by an application operating within a limited rights context in which elevated tasks associated with elevated objects in the object agent may not be performed. The instance of the object agent may then be created within a higher rights context in which the elevated objects and their tasks may be performed. As noted above the instance of the object agent may be created with a single Elevation Moniker call or otherwise be created following a single rights elevation process by the user.

In at least some embodiments the object agent may have an undefined or arbitrarily large number of slots with which an object may be created. This is shown in part with methods through . Each of these methods is capable when executed within an appropriate rights context of creating instances of elevated objects that are capable of performing their associated elevated tasks.

The agent module may build these methods capable of creating instances of objects through CCI calls using received parameters such as the illustrated P P and P . Here we assume that two parameters were received and two methods built for Object A and Object B.

At arrow the agent module may associate rights elevation information with the object agent. This information may be received from a programmer and used by elevation module to inform a user about the elevated tasks enabled by the object agent. In some cases a programmer groups elevated objects into the object agent based on their general theme or a theme that the user may understand.

In the installation wizard example for instance the programmer of the installation wizard may provide text indicating that the user is being requested to elevate his or her rights in order to alter a display for the new video card. This may provide additional security for the computing device and its user. If malicious code were to attempt to create an instance of the object agent in a higher rights context the elevation module may provide this information. This information would indicate that the user is being asked to elevate his or her rights to alter a display. But if that malicious code has nothing to do with altering the computing device s display e.g. the user thought that the malicious code was to play music or open a spreadsheet document the user may be tipped off and not elevate his or her rights. Thus the tools enable additional security through context provided by a person that provides the parameters specifying the elevated objects for a given object agent.

In at least some embodiments the agent module may also only permit a person to build an object agent if they are trusted e.g. are the computing device s local administrator or are most trusted e.g. information from them may not be repudiated which may tinter improve security. One way in which to do this is to receive parameters and elevation information within a higher rights context. Elevation information received from a trusted or most trusted source may then be deemed trusted which the elevation module may indicate to a user as part of a rights elevation process. The elevation information may also comprise in some cases untrusted information such as showing a path name of a non signed binary when the non signed binary is being executed.

The following discussion describes exemplary ways in which the tools use an object agent to enable a user to permit tasks requiring elevated rights with as little as one rights elevation in accordance with one embodiment. This discussion refers to particular elements such as elements of operating environment of and continues the example of the installation wizard described above though other elements and applications may be used.

Block executes an application within a limited rights context. The application can require performance of distinct tasks not permitted within the limited rights context. Object agents may be used by different applications or reused by the same application. In some cases multiple applications operating in various rights contexts may use instances of the object agent and at the same or different times. One application operating within a standard user account may use an instance of the object agent while another application operating in limited rights tier of a multi tiered account may use another instance of the object agent.

Here the installation wizard application for example may be executed within a process having limited rights not permitting the installation wizard to change a computing device s display settings or write display configuration information to the computing device s system registry.

Block calls an instance of an object agent. For this call to be successful a user may need to elevate his or her rights though this elevation may be limited to the object agent and tasks it enables. Here the installation wizard calls the exemplary object agent shown in with an Elevation Moniker call shown in at marked EM .

Block initiates a rights elevation process by which a user may elevate his or her rights to permit creation of the instance of the object agent. The rights elevation process may use a dialog box with a single button to select elevation a data entry field for entry of credentials a biometric scanning device for entry of authenticating biological credentials or other techniques.

Block provides elevation information associated with the object agent. This elevation information may be trusted. It may also indicate to a user what kind of tasks elevating his or her rights will permit. Here object agent of provides elevation information to elevation module of . This elevation information indicates that the object agent intends to alter the computing device s display settings. Here the elevation module presents this elevation information within the single dialog box to inform the user as to what type of tasks the user will be permitting by elevating his rights. This is indicated in at .

Block receives permission to elevate rights to a level sufficient to create an instance of the object agent and permit its elevated tasks. Here the user selected a button to raise his or her rights tier responsive to reading that the rights elevation is to change display settings. Receiving permission from the user is indicated in at .

Block creates an instance of the object agent. The instance may be created responsive to a user elevating his or her rights just once as described above. Here the user wishes to install the video card sees a dialog to elevate rights reads that the elevation is for display settings which is related to the installation wizard and what the user wants and selects to elevate rights for this indicated purpose. Responsive to this the tools create an instance of object agent of . This creation is shown with an arrow at .

The tools create the instance of the object agent within a rights context capable of permitting elevated tasks needed by the application. Here shows the instance executing within a higher rights process . The higher rights process is based on permission received by the user s elevation at block . This particular higher rights context is based on a higher rights tier of the user s multi tiered account and shown with a T a higher rights token .

Note that the user s elevation of rights is not universal or permanent. The application for instance remains operating within the limited rights context. Other unrelated applications may also remain in their limited rights contexts. Also the higher rights process may close after performing the elevated tasks.

Block may also communicate that the object agent instance has been created and enable the application to communicate with the object agent e.g. to create instances of elevated objects . This is shown with O in .

Block creates an instance of an elevated object. The instance of the object agent created at block may create elevated objects and enable each of them to be called to perform an associated task. Here the object agent instance creates an instance of Object A from responsive to the application asking for Object A with give Object A at . The object agent creates the instance of Object A using a method that gives Object A and makes a CCI call not requiring a rights elevation. This is shown at in .

Block enables the application to request that an elevated task associated with the elevated object be performed. Here this is shown at with O .

Block receives a request to perform an elevated task. Here a method of instance receives a request from the installation wizard operating within the limited rights process. The request is shown with do elevated Task A and its outbound arrow to method .

Block performs the elevated task within a higher rights context. This elevated task may be enabled by the instance of the elevated object associated with the elevated task. Here instance of Object A as described above alters display settings within the higher rights process for the installation wizard. This is shown with do elevated Task A in Object A at .

Blocks through may be performed again for as many elevated objects as are in the object agent shown with a dashed arrow in . Here blocks through are performed effective to perform elevated Task B through an instance of Object B effective to write display configuration information to the computing device s system registry shown with do elevated Task B at .

Block closes the higher rights process in which the instance of the object agent operates following performance of the elevated tasks enabled by the object agent. Here the higher rights process closes after the task writes display configuration information to the computing device s system registry and prior to the installation wizard closing.

The above described systems methods and or techniques enable a user to permit multiple tasks requiring elevated rights with as little as one rights elevation. This may improve a user s experience and security by reducing how many times he or she needs to elevate his or her rights.

Although the systems and methods have been described in language specific to structural features and or methodological acts it is to be understood that the systems methods and techniques defined in the appended claims are not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed systems methods and techniques.

