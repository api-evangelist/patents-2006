---

title: Evaluation of incremental backup copies for presence of malicious codes in computer systems
abstract: In one embodiment, incremental backups containing information on modified addressable portions of a data storage device are evaluated for presence of malicious codes (“malwares”). Each modified addressable portion may be individually accessed and scanned for malicious codes. Each modified addressable portion may also be mapped to its associated file, allowing the associated file to be scanned for malicious codes. These allow an incremental backup to be evaluated even when it only contains portions, rather than the entirety, of several different files. A clean incremental backup may be selected for restoring the data storage device in the event of malicious code infection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962956&OS=07962956&RS=07962956
owner: Trend Micro Incorporated
number: 07962956
owner_city: Tokyo
owner_country: JP
publication_date: 20061108
---
The present invention relates generally to data processing and more particularly but not exclusively to methods and apparatus for detecting malicious codes in backups.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between various types of malicious codes malicious codes are also commonly collectively referred to as viruses or malwares. The threat posed by malwares is well known prompting most computer users to have some form of antivirus. However some malwares such as root kits are difficult to detect and remove even with current antivirus techniques. What is needed is an effective technique for removing malwares from infected computers.

In one embodiment incremental backups containing information on modified addressable portions of a data storage device are evaluated for presence of malicious codes malwares . Each modified addressable portion may be individually accessed and scanned for malicious codes. Each modified addressable portion may also be mapped to its associated file allowing the associated file to be scanned for malicious codes. These allow an incremental backup to be evaluated even when it only contains portions rather than the entirety of several different files. A clean incremental backup may be selected for restoring the data storage device in the event of malicious code infection.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

In operation the application program running in user mode space may request access to a file stored in the disk by calling into an application programming interface API e.g. Win32 API in conjunction with Kernel32.dll and NtDll.dll . The file access request is received and processed by a kernel file system interface e.g. NTOSKRNL.EXE in conjunction with DRIVER.SYS running in kernel mode space. The kernel file system interface asks a file system e.g. NTFS.SYS for the file.

In general modules above the file system operate on a logical level whereas modules below the file system operate on a physical level. For example the kernel file system interface does not know where the data bits comprising the file are physically stored in the disk . All the kernel file system interface knows is that there is a collection of data bits in the disk that form the file. It is the job of the file system to keep track of the physical portions of the disk that correspond to particular files. In this case the file system employs a low level hardware driver e.g. DISK.SYS disk port driver disk mini port driver to directly access particular bits of data from the disk . The low level hardware driver like the rest of the I O stack operates in kernel mode space and is configured to directly access addressable portions of the disk . In general the smallest addressable data unit on a physical as opposed to logical level on a disk is referred to as a sector and a collection of sectors is referred to as a cluster. In the example of the low level hardware driver accesses the sectors comprising the requested file in the disk .

A rootkit comprises computer readable program code designed to conceal running processes files or system data. Rootkits may be used to surreptitiously modify parts of the operating system or install themselves as drivers or kernel modules. Increasingly rootkits are being used by virus coders as malicious code or part of malicious code. For example a rootkit may be used to hook into various modules shown in or infect a computer system by direct kernel object manipulation DKOM . Rootkits are thus especially difficult to detect and remove. Other malwares are also becoming more difficult to detect and remove by injecting themselves into legitimate and important processes running multiple processes that monitor and revive each other terminating or interfering with antivirus and other security products taking advantage of operating system provided security features or system functions automatically updating themselves with new patches and payloads and so on.

Regardless of the sophistication of malwares they have to be permanently stored on a data storage medium to survive a system reset or reboot. As will be more apparent below embodiments of the present invention take advantage of this by looking for the presence of malwares in data storage devices and finding a clean incremental backup copy from which to restore the infected system.

Computer backups have been used as protective measures against data loss in the event of a hardware failure software bug human operator error or natural catastrophe. A computer backup may be a full backup or an incremental backup. As its name implies a full backup comprises a complete copy of the data such that the data can be restored solely using the full backup. A problem with full backups is that they take some time to create especially when the data is relatively large. To avoid this problem incremental backups may be created. An incremental backup saves a portion rather than the entirety of the data at a particular point in time usually after creation of a full backup. The full backup plus one or more incremental backups created thereafter may be used to restore the data in the event of an irrecoverable data storage device error such as a hard disk crash. If the data storage device is still accessible data on the device may be restored using one or more of the incremental backups without using the full backup. The details of restoring data from incremental and or full backups depend on the particular backup technology employed.

Backup operations may also be performed online i.e. while the computer is normally operating or offline i.e. with normal computer operations halted . In embodiments of the present invention the preferred backup procedure involves creation of incremental backups while the computer system is online. This allows the backup procedure to proceed with minimal impact on system performance and normal operations. Example backup procedures that may be used in embodiments of the present invention include those employed by the Microsoft Volume Shadow Copy Service VSS backup service.

Backup copies may be created at different points in time to ensure that the most recent data is included in the backup. An incremental backup copy created at a particular point in time is also referred to herein as a snapshot. schematically shows snapshots of online data being created and stored in a backup data storage device. A backup data storage device may comprise magnetic tape optical disk e.g. DVD CD RW external hard drive and other data storage medium.

Copy on write COW also referred to as differential copy is an incremental backup procedure that saves changes to data stored in a data storage device. In COW a copy of original data in a storage device is saved in a difference area prior to being overwritten. COW may operate on the physical level. For example COW may be used to store changes to data stored on sectors or clusters of a disk storage device. schematically illustrates the operation of an example COW backup procedure. In the example of the original area of the disk storage device has the data 1 2 3 and 4 at sectors 0x0010 0x0011 0x0012 and 0x0013 respectively at time T. At time T the 2 in sector 0x0011 is overwritten with the value 5. This results in the COW backup procedure writing in the difference area the original data in sector 0x0011 at time T 2 in this example . Examples of backup services that may incorporate COW include the Microsoft Volume Shadow Copy Service . For example the Microsoft Volume Shadow Copy Service may be employed with a so called software provider such as VOLSNAP.SYS in the Microsoft Windows operating system to implement a COW backup procedure. Preferably embodiments of the present invention operate on snapshots containing differential data created by a COW backup procedure to detect and remove malwares from infected computer systems.

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer may have less or more components to meet the needs of a particular application. As shown in the computer may include a processor such as those from the Intel Corporation or Advanced Micro Devices for example. The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. keyboard mouse one or more data storage devices a display monitor e.g. LCD flat panel monitor CRT a computer network interface e.g. network adapter modem and a main memory e.g. RAM . In the example of the main memory includes software components of a backup selection module as well as an I O stack a disk driver and a file based antivirus . The software modules in the main memory may comprise computer readable program code executable by the processor . As can be appreciated one or more of these modules may also be implemented in hardware or combination of hardware and software without detracting from the merits of the present invention.

The computer may further include a backup storage device comprising backups of data in a data storage device which in this embodiment comprises a hard disk. The data may be the entirety or a portion e.g. one of several volumes of the storage space of the data storage device . In conformance with common usage and for ease of illustration the phrase backup of a storage device is interchangeably used herein with the phrase backup of data stored in a storage device. 

The backup storage device may comprise any suitable backup storage device including another hard disk writable optical disk magnetic tape and so on. In the example of the backup storage device includes one or more snapshots i.e. . . . and a full backup . The snapshots and the full backup may be stored in separate backup storage devices but are shown as in a single backup storage device for illustration purposes only. The snapshots may also be stored in the data storage device .

The full backup may be a complete copy i.e. a clone of the entirety of the data in the data storage . The full backup may be used by itself or together with one or more snapshots to restore the data in the event of an irrecoverable data storage device error such as when the data storage device crashes and cannot be accessed.

A snapshot may comprise an incremental backup of the data at a particular point in time. For example the full backup may be created at time T the snapshot may be taken at a time T i.e. after time T the snapshot may be taken at time T i.e. after time T and so on. In one embodiment a snapshot comprises differential data created using a COW backup procedure. For example a snapshot may have differential data for sectors of the data storage device that have been changed due to changes in the data . Each of the differential data may comprise original data stored in a sector prior to that sector being overwritten with new data. Referring to a snapshot may have several sections i.e. . . . with each section including a sector address i.e. . . . and differential data i.e. . . . . A sector address identifies a physical storage location in the data storage device and a differential data is the original data in that physical storage location and which has been overwritten with new data. In one embodiment a sector address is the address of the smallest addressable physical storage location in the data storage device which in this example is a hard disk sector. The modified sectors noted in a snapshot may be occupied by different files. For example the modified sector indicated by the section may contain a portion of a first file the modified sector indicated by the section may contain a portion of a second file that is different from the first file and so on. The snapshots may be created using the Microsoft Volume Shadow Copy Service backup service for example. The full backup may be created using a backup tool of the operating system or a third party full backup software.

The backup selection module may comprise computer readable program code configured to select a backup that is free of malwares among one or more backups. In one embodiment the backup selection module selects the most recent i.e. one with most current data malware free snapshot among several consecutively taken snapshots created before an infection. The backup selection module may scan all available snapshots for viruses and recommend the most recent malware free snapshot that may be used to restore an infected computer. In the example of the backup selection module comprises a backup analyzer a sector scanner sector malware patterns and a mapping module .

The backup analyzer may comprise computer readable program code configured to access the contents of a snapshot to sequence through the sections of a snapshot for scanning by the sector scanner and to manage the operations of the backup selection module . In some embodiments the backup analyzer may be configured to work with the mapping module to identify a file associated with a section of a snapshot and to have that file scanned for malwares using a file based antivirus .

The sector scanner may comprise computer readable program code for scanning a physical storage location in a data storage device differential data in a snapshot or both for presence of malwares. The sector scanner may be configured to individually scan smallest addressable physical storage locations in the data storage device. The sector scanner may also be configured to scan a differential data in a snapshot . In one embodiment the sector scanner is configured to scan a sector of a storage device such as the data storage device . This advantageously allows the sector scanner to scan individual physical storage locations such as those referenced by a snapshot . In marked contrast conventional file based antivirus only scans entire files not small portions of a file. In one embodiment the sector scanner compares the contents of a sector to malware patterns included in the sector malware patterns . If the contents of the sector match a malware pattern in the sector malware patterns the sector scanner deems that sector to be infected.

In one embodiment the sector scanner accesses a sector of a storage device by way of a low level hardware driver e.g. low level hardware driver of of the I O stack of the operating system. Alternatively or in addition the sector scanner may access a sector of a storage device using a separate low level hardware disk driver configured solely for use by components of the backup selection module . The disk driver may be configured to directly access physical storage locations of the data storage device by writing to or reading from registers of the data storage device for example. Other ways of directly accessing addressable physical storage locations of a storage device may also be used without detracting from the merits of the present invention.

The sector malware patterns may comprise patterns of known malwares. In one embodiment each malware pattern in the sector malware patterns fits in the smallest addressable physical storage location of a storage device which in this example is a sector of a hard disk. For example a malware pattern may be 512 bytes long if the storage device has 512 byte sectors. Each malware pattern may be created using techniques similar to those for file based antivirus. For example honey pot computer systems may be located all over the world to attract and collect information on malwares in the wild. Once a malware is detected in a honey pot computer antivirus researchers e.g. those with the TrendLabs antivirus research center of Trend Micro Inc. may examine the malware to determine the tell tale pattern it makes on a sector of an infected storage device. That pattern may be included in a pattern file for periodic distribution to subscribing computers over the Internet for use as sector malware patterns for example.

The mapping module may comprise computer readable program code for identifying the file associated with data stored in an addressable physical storage location in a storage device. In one embodiment the mapping module is configured to determine which file a sector data belongs to. As can be appreciated a file may be stored in several sectors of a data storage device. This is illustrated in where a file named MyDoc.txt in the example occupies sectors and of a data storage device which is a hard disk in the example. A meta data entry may be used to link together all sectors storing the contents of the file . The meta data entry which may be part of or accessible to the file system may comprise a bit map for example. In one embodiment the mapping module receives a sector s address and identifies the file associated with that sector by consulting meta data entry in the file system or other module that has access to meta data entry for that sector. For example the mapping module may backtrack from a sector the meta data entry for that sector and then to the file associated with the meta data entry. As will be more apparent below this allows the backup selection module to read a snapshot to find a sector that has been overwritten identify the file whose data is in that sector and scan that file for malwares using the file based antivirus .

The file based antivirus may comprise computer readable program code for scanning files for malwares. The file based antivirus may be a commercially available file based antivirus such as those available from Trend Micro Inc. for example. Other ways of scanning files for malwares may also be used without detracting from the merits of the present invention. In one embodiment the file based antivirus is employed to scan the full backup and files associated with modified sectors for malwares. The full backup may be scanned using the file based antivirus because unlike a snapshot the full backup typically includes entire files.

An example operation of the backup selection module is now described with reference to . shows the clusters of a data storage device modified by various programs at different points in time. In the example of the Microsoft Word word processing program modified clusters and of the data storage device between times T and T the Microsoft Internet Explorer web browser modified cluster between times T and T the Microsoft Notepad application modified clusters between times T and T and a virus modified clusters between times T and T. A COW snapshot is taken at each of times T T T and T. The snapshot taken at time T includes the differential data for the sectors of clusters the snapshot taken at time T includes the differential data for the sectors of clusters the snapshot taken at time T includes the differential data for the sectors of cluster the snapshot taken at time T includes the differential data for the sectors of clusters and . In one embodiment the backup selection module scans for malwares individual sectors in the data storage device that are indicated in the snapshots as having been modified. In the example of the backup selection module would thus scan for malwares each sector of clusters clusters cluster and clusters and in the data storage device itself. Doing so would reveal that sectors of clusters which are noted in the snapshot taken at time T are infected by a virus and that other sectors indicated in the other snapshots are virus free. Accordingly the backup selection module would recommend to the user to restore his or her file system using the snapshot taken at time T as that is the latest snapshot taken before the system got infected by the virus between times T and T.

In the method the backup analyzer retrieves the most recent snapshot that has not been evaluated for malware detection purposes step . The backup analyzer reads all sector information from the snapshot including the addresses of modified sectors. This may be performed by reading the sector addresses of the snapshot . The backup analyzer provides the sector addresses to the sector scanner which uses the sector addresses to retrieve the contents of the modified sectors from the data storage device step . The sector scanner individually scans the current contents of the modified sectors for presence of malwares step . Optionally or in addition the sector scanner also scans corresponding differential data for malwares. The sector scanner informs the backup analyzer of the results of the scanning. The backup analyzer keeps track of the results of the scanning step . The backup analyzer checks to see if there is snapshot that has not been evaluated for malware detection step . If so the backup analyzer retrieves that snapshot for scanning as previously described. Otherwise the backup analyzer reviews the scanning results to recommend a malware free snapshot that may be used to restore the backed up data step . The recommended snapshot may be the latest one taken before any snapshot that notes an infected modified sector.

As can be appreciated the just described embodiments for evaluating backups not only allow for scanning of individual modified sectors noted in a snapshot but are also relatively fast compared to traditional file based scanning. This is because unlike file based scanning scanning individual modified sectors noted in a snapshot only requires scanning of small portions of the data storage device rather than entire files.

In the example of the backup analyzer retrieves a snapshot and goes through each of its sections . The backup analyzer retrieves a sector address of a section arrow . The sector address is the address of a modified sector in the storage device. The backup analyzer provides the sector address to the mapping module arrow which identifies the file occupying the sector having that sector address. The mapping module reports the file to the backup analyzer arrow which then requests the file based antivirus to scan the file arrow . The mapping module may forward to the backup analyzer the name of the file and its logical e.g. directory location in the storage device. The backup analyzer may forward the same information to the file based antivirus to allow it to logically as opposed to physically locate access and scan the file for malwares arrow . The file based antivirus informs the backup analyzer of the result of the scanning arrow such as whether or not the file contains a malware or a portion of a malware. If the file contains a malware or a portion of a malware the modified sector indicated in the snapshot may have been modified by a malware. The backup analyzer keeps track of the scanning results and repeats the process for the next section of the snapshot and then for the next snapshot yet to be evaluated. After evaluating all available snapshots the backup analyzer may examine the scanning results to find the latest snapshot with no infected modified sector and has been taken before any snapshot that includes one or more infected modified sectors. That snapshot may be used to restore the data storage device to a clean state.

Referring now to there is shown a flow diagram of a method of selecting an incremental backup copy among a plurality of incremental backup copies in accordance with the second embodiment of the present invention. The method may be employed to select an incremental backup that may be used to restore data on a storage device. In one embodiment the method is employed to select a copy on write snapshot e.g. a snapshot among a plurality of copy on write snapshots. The method will be explained using the components shown in for illustration purposes only. Other components may also be used without detracting from the merits of the present invention.

In the method the backup analyzer retrieves the most recent snapshot that has not been evaluated for malware detection purposes step . The backup analyzer reads all sector information from the snapshot including the addresses of modified sectors step . The backup analyzer provides the address of the modified sectors to the mapping module which then identifies the files associated with the modified sectors i.e. the files having portions in the modified sectors step . The mapping module informs the backup analyzer of the identified files. The backup analyzer requests the file based antivirus to scan each of the identified files for malwares. The file based antivirus scans the files for malwares step and reports the results of the scanning to the backup analyzer . The backup analyzer keeps track of the scanning results step . The backup analyzer checks to see if there is a snapshot that has not been evaluated for malware detection step . If so the backup analyzer retrieves that snapshot for scanning as previously described. Otherwise the backup analyzer reviews the scanning results to recommend a malware free snapshot that may be used to restore the backed up data step . The recommended snapshot may be the latest one taken before any snapshot that notes an infected modified sector.

While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

